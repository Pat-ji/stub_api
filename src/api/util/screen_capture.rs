static EMPTY_VEC_I8 : Vec < i8 > = vec ! [] ; static EMPTY_VEC_I32 : Vec < i32 > = vec ! [] ; use crate :: api :: input :: input :: { input_get_client_rect , JAG_RENDER_VIEW_HWND } ; use eframe :: egui ; use eframe :: egui :: { ColorImage , TextureHandle , TextureOptions } ; use windows :: Win32 :: Graphics :: Gdi :: { GetDC , ReleaseDC , HGDIOBJ } ; use windows :: Win32 :: UI :: WindowsAndMessaging :: PW_RENDERFULLCONTENT ; use windows :: Win32 :: { Foundation :: HWND , Graphics :: Gdi :: { CreateCompatibleBitmap , CreateCompatibleDC , DeleteDC , DeleteObject , GetDIBits , SelectObject , BITMAPINFO , BITMAPINFOHEADER , BI_RGB , DIB_RGB_COLORS , HBITMAP , HDC } } ; # [link (name = "user32")] extern "system" { fn PrintWindow (hwnd : HWND , hdcBlt : HDC , nFlags : u32) -> i32 ; } pub fn screen_capture_capture_game_image (title : String , ui : & egui :: Ui) -> Option < TextureHandle > { unimplemented ! () } pub fn screen_capture_capture_game () -> Option < (i32 , i32 , Vec < u8 >) > { Some (Vec :: new ()) }