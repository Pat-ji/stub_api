static EMPTY_VEC_I8 : Vec < i8 > = vec ! [] ; static EMPTY_VEC_I32 : Vec < i32 > = vec ! [] ; use crate :: api :: display :: display_get_screen_coordinates ; use crate :: api :: util :: projection :: projection_info :: projection_info_get ; use crate :: api :: util :: projection :: projection_info :: ProjectionInfo ; use crate :: api :: util :: random :: random_between_f ; use eframe :: egui :: { Color32 , Painter , Pos2 } ; use eframe :: epaint :: PathStroke ; use rand :: Rng ; # [derive (Debug)] pub struct BoundingBox { vertices : [[i32 ; 2] ; 8] , } impl BoundingBox { pub fn get_vertices (& self) -> & [[i32 ; 2] ; 8] { unimplemented ! () } pub fn offset (& mut self , x : i32 , y : i32) { { } } pub fn get_central_point (& self) -> (i32 , i32) { unimplemented ! () } pub fn get_interaction_point (& self) -> (i32 , i32) { unimplemented ! () } pub fn is_visible (& self) -> bool { unimplemented ! () } pub fn draw (& self , painter : & Painter , color : Color32) { { } } } pub fn bounding_box_calculate_bounding_box (grid_x : i32 , grid_y : i32 , plane : i32 , elevation : i32 , height : i32 , size : i32) -> BoundingBox { unimplemented ! () } pub fn bounding_box_calculate_bounding_box_wh (grid_x : i32 , grid_y : i32 , plane : i32 , elevation : i32 , height : i32 , w : i32 , h : i32) -> BoundingBox { unimplemented ! () }