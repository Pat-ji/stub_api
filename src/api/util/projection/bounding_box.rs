static EMPTY_VEC_I8 : Vec < i8 > = vec ! [] ; static EMPTY_VEC_I32 : Vec < i32 > = vec ! [] ; use crate :: api :: display :: { display_calculate_convex_hull , display_get_screen_coordinates , display_get_world_screen_area , display_is_inside_convex_polygon , ClippingSpace } ; use crate :: api :: scene :: interactable :: Interactable ; use crate :: api :: util :: bot :: bot_get_ui_offset ; use crate :: api :: util :: projection :: projection_info :: projection_info_get ; use crate :: api :: util :: projection :: projection_info :: ProjectionInfo ; use crate :: api :: util :: random :: random_between_f ; use eframe :: egui :: { Color32 , Painter , Pos2 , Stroke } ; use rand :: Rng ; use crate :: api :: domain :: convex_hull :: ConvexHull ; # [derive (Debug)] pub struct BoundingBox { vertices : [[i32 ; 2] ; 8] , } impl Interactable for BoundingBox { fn contains (& self , point : (i32 , i32)) -> bool { unimplemented ! () } fn get_central_point (& self) -> (i32 , i32) { unimplemented ! () } fn get_interaction_point (& self) -> (i32 , i32) { unimplemented ! () } fn is_visible (& self) -> bool { unimplemented ! () } } impl BoundingBox { pub fn get_vertices (& self) -> & [[i32 ; 2] ; 8] { unimplemented ! () } pub fn translate (& mut self , x : i32 , y : i32) { { } } pub fn render (& self , painter : & Painter , color : Color32) { { } } pub fn render_offset (& self , painter : & Painter , offset : (i32 , i32) , color : Color32) { { } } pub fn get_convex_hull (& self) -> ConvexHull { unimplemented ! () } } pub fn bounding_box_calculate_bounding_box (grid_x : i32 , grid_y : i32 , plane : i32 , elevation : i32 , height : i32 , size : i32) -> BoundingBox { unimplemented ! () } pub fn bounding_box_calculate_bounding_box_wh (grid_x : i32 , grid_y : i32 , plane : i32 , elevation : i32 , height : i32 , w : i32 , h : i32) -> BoundingBox { unimplemented ! () }