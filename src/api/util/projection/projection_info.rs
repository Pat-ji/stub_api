static EMPTY_VEC_I8 : Vec < i8 > = vec ! [] ; static EMPTY_VEC_I32 : Vec < i32 > = vec ! [] ; use crate :: api :: camera :: camera_get_camera_info ; use crate :: api :: display :: display_get_viewport ; use crate :: api :: domain :: world_view :: RSWorldView ; use crate :: api :: scene :: heightmap :: Heightmap ; use crate :: api :: scene :: world_view :: world_view_get_world_view ; use crate :: api :: util :: performance :: { performance_get_cached_value , CachedValue } ; use crate :: api :: util :: projection :: camera_info :: CameraInfo ; use crate :: api :: util :: projection :: viewport :: Viewport ; static mut CACHE : Option < CachedValue < ProjectionInfo > > = None ; pub fn projection_info_get () -> & 'static ProjectionInfo { unimplemented ! () } # [derive (Debug)] pub struct ProjectionInfo { plane : i32 , heightmap : Heightmap , camera : CameraInfo , viewport : Viewport } impl ProjectionInfo { pub (crate) fn new (world_view : RSWorldView) -> Self { unimplemented ! () } pub fn is_valid (& self) -> bool { unimplemented ! () } pub fn get_plane (& self) -> i32 { unimplemented ! () } pub fn get_heightmap (& self) -> & Heightmap { unimplemented ! () } pub fn get_camera (& self) -> & CameraInfo { unimplemented ! () } pub fn get_viewport (& self) -> & Viewport { unimplemented ! () } }