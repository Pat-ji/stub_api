static EMPTY_VEC_I8 : Vec < i8 > = vec ! [] ; static EMPTY_VEC_I32 : Vec < i32 > = vec ! [] ; use std :: time :: { Duration , Instant } ; pub (crate) static mut PERFORMANCE_MAX_OBJECTS_RANGE : i32 = 25 ; pub (crate) static mut PERFORMANCE_MAX_GROUND_ITEMS_RANGE : i32 = 22 ; pub fn performance_set_range (performance_range : PerformanceRange) { { } } pub fn _performance_set_range (performance_range : PerformanceRange) { { } } # [repr (C)] # [derive (Debug , PartialEq , Copy , Clone)] pub enum PerformanceRange { Low = 1 , Medium = 2 , High = 3 , VeryHigh = 4 , Highest = 5 , Unlocked = 6 } pub (crate) struct CachedValue < T > { timestamp : Instant , value : T , } pub (crate) fn performance_get_cached_value < T , F > (cache : & mut Option < CachedValue < T > > , create_value : F) -> & T { unimplemented ! () }