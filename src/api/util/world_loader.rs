static EMPTY_VEC_I8 : Vec < i8 > = vec ! [] ; static EMPTY_VEC_I32 : Vec < i32 > = vec ! [] ; use crate :: api :: util :: utils :: utils_create_blocking_browser_client ; use scraper :: element_ref :: Select ; use scraper :: { Html , Selector } ; use std :: collections :: HashMap ; pub struct World { index : i32 , id : i32 , player_count : i32 , members : bool , location : String , activity : String , } impl World { pub (crate) fn new (index : i32 , id : i32 , player_count : i32 , members : bool , location : String , activity : String) -> Self { unimplemented ! () } pub fn get_index (& self) -> i32 { unimplemented ! () } pub fn get_id (& self) -> i32 { unimplemented ! () } pub fn get_player_count (& self) -> i32 { unimplemented ! () } pub fn is_members (& self) -> bool { unimplemented ! () } pub fn get_location (& self) -> & String { unimplemented ! () } pub fn get_activity (& self) -> & String { unimplemented ! () } pub fn is_dangerous (& self) -> bool { unimplemented ! () } pub fn is_full (& self) -> bool { unimplemented ! () } pub fn has_total_requirement (& self) -> bool { unimplemented ! () } } pub struct WorldLoader { worlds : HashMap < i32 , World > , } impl WorldLoader { pub fn new () -> Self { unimplemented ! () } pub fn get_world (& mut self , world : i32) -> Option < & World > { unimplemented ! () } pub fn get_worlds (& mut self) -> & mut HashMap < i32 , World > { unimplemented ! () } pub fn load_worlds (& mut self) { { } } }