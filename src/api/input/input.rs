static EMPTY_VEC_I8 : Vec < i8 > = vec ! [] ; static EMPTY_VEC_I32 : Vec < i32 > = vec ! [] ; use crate :: api :: client :: C_PROCESS_ID ; use crate :: api :: util :: random :: random_from_normal ; use crate :: api :: util :: utils :: utils_sleep ; use crate :: c_address :: CAddress ; use crate :: offsets ; use process_memory :: ProcessHandle ; use std :: borrow :: Cow ; use std :: ffi :: CStr ; use windows :: core :: BOOL ; use windows :: Win32 :: Foundation :: { HWND , LPARAM , RECT , WPARAM } ; use windows :: Win32 :: UI :: Input :: KeyboardAndMouse :: { MapVirtualKeyA , SendInput , INPUT , INPUT_0 , INPUT_MOUSE , MAPVK_VK_TO_VSC , MOUSEEVENTF_ABSOLUTE , MOUSEEVENTF_LEFTDOWN , MOUSEEVENTF_LEFTUP , MOUSEEVENTF_MIDDLEDOWN , MOUSEEVENTF_MIDDLEUP , MOUSEEVENTF_MOVE , MOUSEEVENTF_RIGHTDOWN , MOUSEEVENTF_RIGHTUP , MOUSEEVENTF_WHEEL , MOUSEINPUT } ; use windows :: Win32 :: UI :: WindowsAndMessaging :: { EnumChildWindows , EnumWindows , GetClassNameA , GetClientRect , GetSystemMetrics , GetWindowRect , GetWindowTextA , GetWindowThreadProcessId , IsWindowVisible , PostMessageA , SendMessageA , SM_CXSCREEN , SM_CYSCREEN , WM_CHAR , WM_KEYDOWN , WM_KEYUP , WM_LBUTTONDOWN , WM_LBUTTONUP , WM_MBUTTONDOWN , WM_MBUTTONUP , WM_MOUSEMOVE , WM_MOUSEWHEEL , WM_RBUTTONDOWN , WM_RBUTTONUP } ; static mut JAG_WINDOW_HWND : Option < HWND > = None ; pub (crate) static mut JAG_RENDER_VIEW_HWND : Option < HWND > = None ; static mut INPUT_HARDWARE_INPUT : bool = false ; const INPUT_JAG_RENDER_VIEW_CLASS : & str = "JagRenderView" ; const INPUT_JAG_WINDOW_CLASS : & str = "JagWindow" ; const INPUT_WINDOW_TITLE : & str = "Old School RuneScape" ; pub fn _input_set_hardware_input (hardware_input : bool) { { } } fn enum_child_proc (hwnd : HWND , lparam : LPARAM) -> BOOL { unimplemented ! () } fn enum_windows_callback (hwnd : HWND , lparam : LPARAM) -> BOOL { unimplemented ! () } pub (crate) fn _input_initialize (handle : & ProcessHandle , base_address : usize) { { } } pub (crate) fn input_send_mouse_move (x : i32 , y : i32) { { } } pub (crate) fn input_send_mouse_wheel (delta : i32 , x : i32 , y : i32) { { } } pub (crate) fn input_send_mouse_wheel_click (x : i32 , y : i32 , down : bool) { { } } pub (crate) fn input_send_mouse_button (x : i32 , y : i32 , left : bool , down : bool) { { } } pub (crate) fn input_send_mouse_click (x : i32 , y : i32 , left : bool) { { } } pub (crate) fn input_send_key (key_code : u32 , down : bool) { { } } pub (crate) fn input_send_keypress (key_code : u32) { { } } pub (crate) fn input_send_keychar (key_char : u32) { { } } pub (crate) fn input_get_client_rect () -> Option < (i32 , i32) > { unimplemented ! () }