static EMPTY_VEC_I8 : Vec < i8 > = vec ! [] ; static EMPTY_VEC_I32 : Vec < i32 > = vec ! [] ; use crate :: api :: client :: { _client_get_mouse_x , _client_get_mouse_y } ; use crate :: api :: display :: { display_get_canvas_height , display_get_canvas_width , display_get_viewport_height , display_get_viewport_width } ; use crate :: api :: input :: input :: { input_get_client_rect , input_send_mouse_click , input_send_mouse_move , input_send_mouse_wheel , input_send_mouse_wheel_click } ; use crate :: api :: util :: random :: { random_between , random_from_normal } ; use crate :: api :: util :: utils :: utils_sleep ; use noise :: { NoiseFn , Perlin , Seedable } ; use rand :: Rng ; pub const MOUSE_DEFAULT_SPEED : f64 = 1.5 ; static mut MOUSE_SPEED : f64 = MOUSE_DEFAULT_SPEED ; pub fn _mouse_set_speed (speed : f64) { { } } pub fn mouse_get_speed () -> f64 { unimplemented ! () } pub fn mouse_set_speed (speed : f64) { { } } pub fn mouse_get_x () -> i32 { unimplemented ! () } pub fn mouse_get_y () -> i32 { unimplemented ! () } pub fn mouse_get_position () -> (i32 , i32) { unimplemented ! () } pub fn mouse_click (left : bool) -> bool { unimplemented ! () } pub fn mouse_click_at (x : i32 , y : i32 , left : bool) -> bool { unimplemented ! () } pub fn mouse_scroll (delta : i32) -> bool { unimplemented ! () } pub fn mouse_press_scroll_wheel (down : bool) -> bool { unimplemented ! () } pub fn mouse_is_in_bounds (bounds : (i32 , i32 , i32 , i32)) -> bool { unimplemented ! () } pub fn mouse_move (x : i32 , y : i32) -> bool { unimplemented ! () } pub fn mouse_set_position (x : i32 , y : i32) -> bool { unimplemented ! () } pub fn mouse_is_on_screen () -> bool { unimplemented ! () } pub fn mouse_move_off_screen () -> bool { unimplemented ! () } fn move_mouse_to (x : i32 , y : i32 , speed : f64) { { } } fn move_mouse_from_to (start : (i32 , i32) , end : (i32 , i32) , base_speed : f64) -> bool { unimplemented ! () }