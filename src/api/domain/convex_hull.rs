static EMPTY_VEC_I8 : Vec < i8 > = vec ! [] ; static EMPTY_VEC_I32 : Vec < i32 > = vec ! [] ; use crate :: api :: display :: { display_get_world_screen_area , display_is_inside_convex_polygon , ClippingSpace } ; use crate :: api :: scene :: interactable :: Interactable ; use crate :: api :: util :: random :: { random_between , random_f } ; pub struct ConvexHull { points : Vec < (i32 , i32) > } impl Interactable for ConvexHull { fn contains (& self , point : (i32 , i32)) -> bool { unimplemented ! () } fn get_central_point (& self) -> (i32 , i32) { unimplemented ! () } fn get_interaction_point (& self) -> (i32 , i32) { unimplemented ! () } fn is_visible (& self) -> bool { unimplemented ! () } } impl ConvexHull { pub (crate) fn new (points : Vec < (i32 , i32) >) -> Self { unimplemented ! () } }