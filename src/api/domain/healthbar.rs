static EMPTY_VEC_I8 : Vec < i8 > = vec ! [] ; static EMPTY_VEC_I32 : Vec < i32 > = vec ! [] ; use crate :: c_address :: CAddress ; use crate :: offsets ; # [derive (PartialEq)] pub struct RSHealthBar { address : CAddress } impl RSHealthBar { pub (crate) fn new (address : CAddress) -> Self { unimplemented ! () } pub fn get_definition (& self) -> RSHealthBarDefinition { unimplemented ! () } pub fn get_changes (& self) -> impl Iterator < Item = RSHealthBarChange > { std :: iter :: empty () } } pub struct RSHealthBarDefinition { address : CAddress } impl RSHealthBarDefinition { pub (crate) fn new (address : CAddress) -> Self { unimplemented ! () } pub fn get_scale (& self) -> i32 { unimplemented ! () } } pub struct RSHealthBarChange { address : CAddress } impl RSHealthBarChange { pub (crate) fn new (address : CAddress) -> Self { unimplemented ! () } pub fn get_end (& self) -> i32 { unimplemented ! () } }