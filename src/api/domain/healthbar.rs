static EMPTY_VEC_I8 : Vec < i8 > = vec ! [] ; static EMPTY_VEC_I32 : Vec < i32 > = vec ! [] ; use std :: cmp :: Ordering ; use crate :: c_address :: CAddress ; use crate :: offsets ; # [derive (PartialEq)] pub struct RSHealthBar { address : CAddress } impl RSHealthBar { pub (crate) fn new (address : CAddress) -> Self { unimplemented ! () } pub fn get_definition (& self) -> RSHealthBarDefinition { unimplemented ! () } pub fn get_changes (& self) -> impl Iterator < Item = RSHealthBarChange > { std :: iter :: empty () } } pub struct RSHealthBarDefinition { address : CAddress } impl RSHealthBarDefinition { pub (crate) fn new (address : CAddress) -> Self { unimplemented ! () } pub fn get_scale (& self) -> i32 { unimplemented ! () } } # [derive (PartialEq)] pub struct RSHealthBarChange { address : CAddress } impl Ord for RSHealthBarChange { fn cmp (& self , other : & Self) -> Ordering { unimplemented ! () } } impl PartialOrd < Self > for RSHealthBarChange { fn partial_cmp (& self , other : & Self) -> Option < Ordering > { unimplemented ! () } } impl RSHealthBarChange { pub (crate) fn new (address : CAddress) -> Self { unimplemented ! () } pub fn get_time (& self) -> i32 { unimplemented ! () } pub fn get_end (& self) -> i32 { unimplemented ! () } }