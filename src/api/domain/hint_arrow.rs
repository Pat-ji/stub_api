static EMPTY_VEC_I8 : Vec < i8 > = vec ! [] ; static EMPTY_VEC_I32 : Vec < i32 > = vec ! [] ; use crate :: api :: domain :: character :: CharacterImpl ; use crate :: api :: domain :: entity :: Entity ; use crate :: api :: scene :: coords :: position :: Position ; use crate :: api :: scene :: npcs :: npcs_get_at_index ; use crate :: api :: scene :: players :: players_get_at_index ; use crate :: api :: scene :: world_view :: world_view_get_plane ; use crate :: c_address :: CAddress ; use crate :: offsets ; # [derive (Debug , PartialEq , Clone)] pub enum HintArrowType { None , Npc , Player , Position } impl HintArrowType { pub fn for_type (value : i32) -> HintArrowType { unimplemented ! () } } # [derive (PartialEq , Clone)] pub struct RSHintArrow { address : CAddress } impl RSHintArrow { pub (crate) fn new (address : CAddress) -> Self { unimplemented ! () } pub fn get_type (& self) -> HintArrowType { unimplemented ! () } pub fn is_active (& self) -> bool { unimplemented ! () } pub fn get_position (& self) -> Option < Position > { unimplemented ! () } pub fn get_target_character (& self) -> Option < CharacterImpl > { unimplemented ! () } pub fn get_target_character_for_type (& self , arrow_type : HintArrowType) -> Option < CharacterImpl > { unimplemented ! () } pub fn get_npc_index (& self) -> i32 { unimplemented ! () } pub fn get_player_index (& self) -> i32 { unimplemented ! () } pub fn get_x (& self) -> i32 { unimplemented ! () } pub fn get_y (& self) -> i32 { unimplemented ! () } fn _get_type (& self) -> i32 { unimplemented ! () } }