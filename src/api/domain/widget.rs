static EMPTY_VEC_I8 : Vec < i8 > = vec ! [] ; static EMPTY_VEC_I32 : Vec < i32 > = vec ! [] ; use crate :: api :: client :: { _client_get_widget_bounds_x , _client_get_widget_bounds_y , client_get_current_time } ; use crate :: api :: display :: display_get_interaction_point ; use crate :: api :: input :: mouse :: { mouse_click , mouse_is_in_bounds , mouse_move } ; use crate :: api :: ui :: menu :: { menu_contains_any_action , menu_interact } ; use crate :: api :: ui :: widgets :: { widgets_get_parent_node_uuid , widgets_get_widget , widgets_is_valid , } ; use crate :: api :: util :: random :: random_from_normal ; use crate :: api :: util :: utils :: { utils_sleep , utils_sleep_conditional } ; use crate :: c_address :: CAddress ; use crate :: offsets ; # [derive (PartialEq)] pub struct RSWidget { address : CAddress , sub_child_id : i32 , } impl std :: fmt :: Debug for RSWidget { fn fmt (& self , f : & mut std :: fmt :: Formatter < '_ >) -> std :: fmt :: Result { unimplemented ! () } } impl RSWidget { pub (crate) fn new (address : CAddress) -> Self { unimplemented ! () } pub (crate) fn new_sub_child (address : CAddress , sub_child_id : i32) -> Self { unimplemented ! () } pub fn get_id (& self) -> i32 { unimplemented ! () } pub fn get_parent_id (& self) -> i32 { unimplemented ! () } pub fn get_x (& self) -> i32 { unimplemented ! () } pub fn get_y (& self) -> i32 { unimplemented ! () } pub fn get_width (& self) -> i32 { unimplemented ! () } pub fn get_height (& self) -> i32 { unimplemented ! () } pub fn get_bounds_index (& self) -> i32 { unimplemented ! () } pub fn get_children_count (& self) -> i32 { unimplemented ! () } pub fn get_item_id (& self) -> i32 { unimplemented ! () } pub fn get_item_amount (& self) -> i32 { unimplemented ! () } pub fn get_sprite_index_1 (& self) -> i32 { unimplemented ! () } pub fn get_sprite_index_2 (& self) -> i32 { unimplemented ! () } pub fn get_displayed_time (& self) -> i32 { unimplemented ! () } pub fn get_message (& self) -> String { unimplemented ! () } pub fn get_spell_name (& self) -> String { unimplemented ! () } pub fn get_actions (& self) -> Vec < String > { Vec :: new () } pub fn get_scroll_y (& self) -> i32 { unimplemented ! () } pub fn get_text_color (& self) -> i32 { unimplemented ! () } pub fn get_root_id (& self) -> i32 { unimplemented ! () } pub fn get_child_id (& self) -> i32 { unimplemented ! () } pub fn get_sub_child_id (& self) -> i32 { unimplemented ! () } pub fn get_parent_widget (& self) -> Option < RSWidget > { unimplemented ! () } pub fn get_abs_x (& self) -> i32 { unimplemented ! () } pub fn get_abs_y (& self) -> i32 { unimplemented ! () } pub fn get_bounds (& self) -> (i32 , i32 , i32 , i32) { unimplemented ! () } pub fn get_child_widgets (& self) -> impl Iterator < Item = RSWidget > { std :: iter :: empty () } pub fn get_child_widget (& self , child_id : i32) -> Option < RSWidget > { unimplemented ! () } pub fn is_visible (& self) -> bool { unimplemented ! () } pub fn has_action (& self , action : & str) -> bool { unimplemented ! () } pub fn has_any_action (& self , actions : & [& str]) -> bool { unimplemented ! () } pub fn hover (& self) -> bool { unimplemented ! () } pub fn click (& self , left : bool) -> bool { unimplemented ! () } pub fn interact (& self , action : & str) -> bool { unimplemented ! () } pub fn interact_any (& self , actions : & [& str]) -> bool { unimplemented ! () } }