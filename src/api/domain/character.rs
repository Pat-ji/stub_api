static EMPTY_VEC_I8 : Vec < i8 > = vec ! [] ; static EMPTY_VEC_I32 : Vec < i32 > = vec ! [] ; use crate :: api :: domain :: animable :: { Animable , RSAnimable } ; use crate :: api :: domain :: entity :: Entity ; use crate :: api :: domain :: healthbar :: RSHealthBar ; use crate :: api :: domain :: npc :: RSNpc ; use crate :: api :: domain :: object :: Object ; use crate :: api :: domain :: player :: RSPlayer ; use crate :: api :: scene :: characters :: characters_get_character ; use crate :: c_address :: CAddress ; use crate :: offsets ; pub enum CharacterImpl { Player (RSPlayer) , Npc (RSNpc) } # [derive (PartialEq , Copy , Clone)] pub struct RSCharacter { address : CAddress , animable : RSAnimable , index : i32 , } pub trait Character : Animable + Entity { fn get_character (& self) -> & RSCharacter ; fn get_index (& self) -> i32 { unimplemented ! () } fn _get_grid_x (& self) -> i32 { unimplemented ! () } fn _get_grid_y (& self) -> i32 { unimplemented ! () } fn get_rotation (& self) -> i32 { unimplemented ! () } fn get_interacting (& self) -> i32 { unimplemented ! () } fn get_animation (& self) -> i32 { unimplemented ! () } fn get_animation_delay (& self) -> i32 { unimplemented ! () } fn get_animation_standing (& self) -> i32 { unimplemented ! () } fn get_walking_queue_size (& self) -> i32 { unimplemented ! () } fn _get_local_x (& self) -> i32 { unimplemented ! () } fn _get_local_y (& self) -> i32 { unimplemented ! () } fn get_health_percentage (& self) -> i32 { unimplemented ! () } fn get_health_bars (& self) -> impl Iterator < Item = RSHealthBar > { std :: iter :: empty () } fn is_moving (& self) -> bool { unimplemented ! () } fn _get_x (& self) -> i32 { unimplemented ! () } fn _get_y (& self) -> i32 { unimplemented ! () } fn is_animating (& self) -> bool { unimplemented ! () } fn is_interacting (& self) -> bool { unimplemented ! () } fn get_interacting_character (& self) -> Option < CharacterImpl > { unimplemented ! () } } impl RSCharacter { pub (crate) fn new (address : CAddress , animable : RSAnimable , index : i32 ,) -> Self { unimplemented ! () } pub fn get_animable (& self) -> & RSAnimable { unimplemented ! () } }