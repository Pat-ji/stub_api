static EMPTY_VEC_I8 : Vec < i8 > = vec ! [] ; static EMPTY_VEC_I32 : Vec < i32 > = vec ! [] ; use crate :: api :: def :: object_definitions :: object_definitions_for_object ; use crate :: api :: domain :: dynamic_object :: RSDynamicObject ; use crate :: api :: domain :: entity :: Entity ; use crate :: api :: domain :: ground_decoration :: RSGroundDecoration ; use crate :: api :: domain :: interactable_object :: RSInteractableObject ; use crate :: api :: domain :: model :: Model ; use crate :: api :: domain :: object_definition :: RSObjectDefinition ; use crate :: api :: domain :: wall_decoration :: RSWallDecoration ; use crate :: api :: domain :: wall_object :: RSWallObject ; use crate :: api :: util :: utils :: utils_remove_tag ; use crate :: api :: util :: uuid_decoder :: { uuid_decoder_decode_entity_type , uuid_decoder_decode_id , uuid_decoder_decode_x , uuid_decoder_decode_y } ; pub trait Object : Entity { fn get_uuid (& self) -> i64 ; fn get_config (& self) -> i32 ; fn get_type_flag (& self) -> i32 ; fn get_dynamic_object (& self) -> Option < RSDynamicObject > ; fn get_uuid_x (& self) -> i32 { unimplemented ! () } fn get_uuid_y (& self) -> i32 { unimplemented ! () } fn get_uuid_id (& self) -> i32 { unimplemented ! () } fn get_uuid_type (& self) -> u8 { unimplemented ! () } fn get_config_type (& self) -> i32 { unimplemented ! () } fn get_config_orientation (& self) -> i32 { unimplemented ! () } fn get_orientation (& self) -> i32 { unimplemented ! () } fn get_definition (& self) -> Option < RSObjectDefinition > { unimplemented ! () } fn get_id (& self) -> i32 { unimplemented ! () } fn get_name (& self) -> String { unimplemented ! () } fn _load_model (& self) -> Option < Model > { unimplemented ! () } fn _get_menu_vars (& self) -> Option < (i32 , i32 , i32) > { unimplemented ! () } fn _get_menu_option (& self) -> Option < String > { unimplemented ! () } } pub struct TileObjects { ground_decoration : Option < RSGroundDecoration > , wall_decoration : Option < RSWallDecoration > , wall_object : Option < RSWallObject > , interactable_objects : Vec < RSInteractableObject > } impl TileObjects { pub (crate) fn new (ground_decoration : Option < RSGroundDecoration > , wall_decoration : Option < RSWallDecoration > , wall_object : Option < RSWallObject > , interactable_objects : Vec < RSInteractableObject >) -> Self { unimplemented ! () } pub fn get_ground_decoration (& self) -> & Option < RSGroundDecoration > { unimplemented ! () } pub fn get_wall_decoration (& self) -> & Option < RSWallDecoration > { unimplemented ! () } pub fn get_wall_object (& self) -> & Option < RSWallObject > { unimplemented ! () } pub fn get_interactable_objects (& self) -> & Vec < RSInteractableObject > { unimplemented ! () } }