static EMPTY_VEC_I8 : Vec < i8 > = vec ! [] ; static EMPTY_VEC_I32 : Vec < i32 > = vec ! [] ; use crate :: api :: display :: { display_calculate_triangle_area , display_get_model_screen_coordinates , display_get_random_point_in_triangle , CAMERA_COS_TABLE , CAMERA_SIN_TABLE } ; use crate :: api :: scene :: interactable :: Interactable ; use crate :: api :: util :: projection :: projection_info :: projection_info_get ; use crate :: api :: util :: random :: random_between_f ; use eframe :: egui :: { Color32 , Painter , Pos2 } ; use eframe :: epaint :: PathStroke ; use rand :: Rng ; pub struct Model { id : i32 , vertex_count : i32 , face_count : i32 , vertex_x : Vec < i32 > , vertex_y : Vec < i32 > , vertex_z : Vec < i32 > , face_x : Vec < i32 > , face_y : Vec < i32 > , face_z : Vec < i32 > , grid_x : i32 , grid_y : i32 , plane : i32 , elevation : i32 } impl Interactable for Model { fn get_central_point (& self) -> (i32 , i32) { unimplemented ! () } fn get_interaction_point (& self) -> (i32 , i32) { unimplemented ! () } fn is_visible (& self) -> bool { unimplemented ! () } } impl Model { pub (crate) fn new (id : i32 , vertex_count : i32 , face_count : i32 , vertex_x : Vec < i32 > , vertex_y : Vec < i32 > , vertex_z : Vec < i32 > , face_x : Vec < i32 > , face_y : Vec < i32 > , face_z : Vec < i32 >) -> Self { unimplemented ! () } pub (crate) fn get_id (& self) -> i32 { unimplemented ! () } pub fn get_vertex_count (& self) -> i32 { unimplemented ! () } pub fn get_face_count (& self) -> i32 { unimplemented ! () } pub fn get_vertex_x (& self) -> & Vec < i32 > { & EMPTY_VEC_I32 } pub fn get_vertex_y (& self) -> & Vec < i32 > { & EMPTY_VEC_I32 } pub fn get_vertex_z (& self) -> & Vec < i32 > { & EMPTY_VEC_I32 } pub fn get_face_x (& self) -> & Vec < i32 > { & EMPTY_VEC_I32 } pub fn get_face_y (& self) -> & Vec < i32 > { & EMPTY_VEC_I32 } pub fn get_face_z (& self) -> & Vec < i32 > { & EMPTY_VEC_I32 } pub (crate) fn merge (& mut self , model : & Model) { { } } pub (crate) fn rotate (& mut self , orientation : i32) { { } } pub (crate) fn rotate_1 (& mut self) { { } } pub (crate) fn rotate_2 (& mut self) { { } } pub (crate) fn rotate_3 (& mut self) { { } } pub (crate) fn resize (& mut self , x : i32 , y : i32 , z : i32) { { } } pub (crate) fn offset (& mut self , x : i32 , y : i32 , z : i32) { { } } pub (crate) fn translate_to_world (& mut self , grid_x : i32 , grid_y : i32 , plane : i32 , elevation : i32) { { } } pub fn get_screen_vertices (& self) -> Vec < (i32 , i32) > { Vec :: new () } pub fn render (& self , painter : & Painter , offset : (i32 , i32) , color : Color32) { { } } }