static EMPTY_VEC_I8 : Vec < i8 > = vec ! [] ; static EMPTY_VEC_I32 : Vec < i32 > = vec ! [] ; use crate :: api :: scene :: collision_map :: CollisionMap ; use crate :: api :: scene :: heightmap :: Heightmap ; use crate :: api :: scene :: map :: { MAP_GET_SIZE , MAP_MAX_PLANE } ; use crate :: c_address :: CAddress ; use crate :: offsets ; # [derive (PartialEq , Copy , Clone)] pub struct RSRegion { address : CAddress } impl RSRegion { pub (crate) fn new (address : CAddress) -> Self { unimplemented ! () } pub fn get_width (& self) -> i32 { unimplemented ! () } pub fn get_height (& self) -> i32 { unimplemented ! () } pub fn get_heightmap (& self) -> Heightmap { unimplemented ! () } pub fn get_collision_flag (& self , x : i32 , y : i32 , plane : i32) -> i32 { unimplemented ! () } pub fn get_collision_map (& self , plane : i32) -> CollisionMap { unimplemented ! () } pub (crate) fn get_tiles (& self) -> CAddress { unimplemented ! () } pub (crate) fn get_tile (& self , tiles : CAddress , region_width : i32 , region_height : i32 , x : i32 , y : i32 , plane : i32) -> CAddress { unimplemented ! () } fn get_tile_heights_address (& self) -> CAddress { unimplemented ! () } fn get_tile_settings_address (& self) -> CAddress { unimplemented ! () } fn get_collision_maps_address (& self) -> CAddress { unimplemented ! () } fn get_collision_map_address (& self , plane : i32) -> CAddress { unimplemented ! () } fn get_collision_flags_address (& self , plane : i32) -> CAddress { unimplemented ! () } }