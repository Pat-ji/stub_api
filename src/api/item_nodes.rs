static EMPTY_VEC_I8 : Vec < i8 > = vec ! [] ; static EMPTY_VEC_I32 : Vec < i32 > = vec ! [] ; use crate :: api :: client :: _client_get_item_nodes ; use crate :: api :: domain :: item_node :: RSItemNode ; use crate :: c_address :: CAddress ; use crate :: offsets ; use log :: error ; use std :: collections :: HashSet ; pub fn item_nodes_get_ids (container_id : i32) -> impl Iterator < Item = i32 > { std :: iter :: empty () } pub fn item_nodes_is_empty (container_id : i32) -> bool { unimplemented ! () } pub fn item_nodes_is_full (container_id : i32 , capacity : usize) -> bool { unimplemented ! () } pub fn item_nodes_get_count (container_id : i32) -> i32 { unimplemented ! () } pub fn item_nodes_get_amount (container_id : i32 , item_id : i32) -> i64 { unimplemented ! () } pub fn item_nodes_contains_any (container_id : i32 , item_ids : & [i32]) -> bool { unimplemented ! () } pub fn item_nodes_contains_all (container_id : i32 , item_ids : & [i32]) -> bool { unimplemented ! () } pub fn item_nodes_get_item_node (container_id : i32) -> Option < RSItemNode > { unimplemented ! () } pub fn item_nodes_get_item_nodes () -> Vec < (i32 , RSItemNode) > { Vec :: new () }