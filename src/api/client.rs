static EMPTY_VEC_I8 : Vec < i8 > = vec ! [] ; static EMPTY_VEC_I32 : Vec < i32 > = vec ! [] ; use crate :: api :: display :: _display_initialize_camera_tables ; use crate :: api :: domain :: widget :: RSWidget ; use crate :: api :: input :: input :: _input_initialize ; use crate :: api :: ui :: widgets :: { widgets_get_widget , widgets_is_root_visible } ; use crate :: api :: util :: utils :: utils_remove_tag ; use crate :: api :: varps :: varps_get_value ; use crate :: c_address :: CAddress ; use crate :: { offsets , API_VERSION } ; use process_memory :: { Pid , ProcessHandle , TryIntoProcessHandle } ; use std :: str :: Split ; pub (crate) static mut C_PROCESS_ID : u32 = 0 ; static mut C_BASE_ADDRESS : Option < CAddress > = None ; static mut C_CLIENT_STRUCT : Option < CAddress > = None ; pub const CLIENT_OUTDATED_MAJOR_VERSION : i32 = 1 ; pub const CLIENT_OUTDATED_MINOR_VERSION : i32 = 2 ; pub fn _client_initialize (pid : u32 , address : usize) -> i32 { unimplemented ! () } fn _client_get_client_struct () -> CAddress { unimplemented ! () } fn _client_get_base_address () -> CAddress { unimplemented ! () } pub (crate) fn _client_get_projectiles () -> CAddress { unimplemented ! () } pub (crate) fn _client_get_world_view () -> CAddress { unimplemented ! () } pub (crate) fn _client_get_world_view_id () -> i32 { unimplemented ! () } pub (crate) fn _client_get_local_player () -> CAddress { unimplemented ! () } pub (crate) fn _client_get_index_object_sets () -> CAddress { unimplemented ! () } pub (crate) fn _client_get_node_sets () -> CAddress { unimplemented ! () } pub (crate) fn _client_get_menu () -> CAddress { unimplemented ! () } pub (crate) fn _client_get_item_nodes () -> (i32 , CAddress) { unimplemented ! () } pub (crate) fn _client_get_varps () -> (i32 , CAddress) { unimplemented ! () } pub (crate) fn _client_get_hovered_entities () -> (i32 , CAddress) { unimplemented ! () } pub (crate) fn _client_get_valid_widgets () -> (i32 , CAddress) { unimplemented ! () } pub (crate) fn _client_get_widgets () -> (i32 , CAddress) { unimplemented ! () } pub (crate) fn _client_get_widget_root () -> (i32 , CAddress) { unimplemented ! () } pub (crate) fn _client_get_chat_buffers () -> (i32 , CAddress) { unimplemented ! () } pub (crate) fn _client_get_widget_nodes () -> CAddress { unimplemented ! () } pub (crate) fn _client_get_widget_bounds_x () -> CAddress { unimplemented ! () } pub (crate) fn _client_get_widget_bounds_y () -> CAddress { unimplemented ! () } pub (crate) fn _client_get_viewport_width () -> i32 { unimplemented ! () } pub (crate) fn _client_get_viewport_height () -> i32 { unimplemented ! () } pub (crate) fn _client_get_viewport_depth () -> i32 { unimplemented ! () } pub (crate) fn _client_get_camera_pitch () -> i32 { unimplemented ! () } pub (crate) fn _client_get_camera_yaw () -> i32 { unimplemented ! () } pub (crate) fn _client_get_camera_x () -> i32 { unimplemented ! () } pub (crate) fn _client_get_camera_y () -> i32 { unimplemented ! () } pub (crate) fn _client_get_camera_z () -> i32 { unimplemented ! () } pub (crate) fn _client_get_camera_scale_z () -> f32 { unimplemented ! () } pub (crate) fn _client_get_current_levels () -> CAddress { unimplemented ! () } pub (crate) fn _client_get_max_levels () -> CAddress { unimplemented ! () } pub (crate) fn _client_get_experience () -> CAddress { unimplemented ! () } pub (crate) fn _client_get_destination () -> CAddress { unimplemented ! () } pub (crate) fn _client_get_local_player_index () -> i32 { unimplemented ! () } pub (crate) fn _client_get_run_energy () -> i32 { unimplemented ! () } pub (crate) fn _client_get_mouse_x () -> i32 { unimplemented ! () } pub (crate) fn _client_get_mouse_y () -> i32 { unimplemented ! () } pub (crate) fn _client_get_grand_exchange_offers () -> CAddress { unimplemented ! () } pub (crate) fn _client_get_region_loader () -> CAddress { unimplemented ! () } pub const CLIENT_GAME_STATE_UNKNOWN : i32 = - 1 ; pub const CLIENT_GAME_STATE_STARTING : i32 = 0 ; pub const CLIENT_GAME_STATE_LOGGED_OUT : i32 = 10 ; pub const CLIENT_GAME_STATE_LOGGING_IN : i32 = 20 ; pub const CLIENT_GAME_STATE_LOADING_MAP : i32 = 25 ; pub const CLIENT_GAME_STATE_LOGGED_IN : i32 = 30 ; pub const CLIENT_GAME_STATE_CONNECTION_LOST : i32 = 40 ; pub const CLIENT_GAME_STATE_CHANGING_WORLDS : i32 = 45 ; const CLIENT_IS_MEMBERS_VARP : i32 = 1780 ; const CLIENT_ACCOUNT_TYPE_VARP : i32 = 499 ; const CLIENT_ACCOUNT_TYPE_VARP_SHIFT : i32 = 3 ; const CLIENT_ACCOUNT_TYPE_VARP_MASK : i32 = 7 ; const CLIENT_WELCOME_SCREEN_ROOT_WIDGET_ID : i32 = 378 ; const CLIENT_WELCOME_SCREEN_PLAY_CHILD_WIDGET_ID : i32 = 73 ; pub fn client_get_major_version () -> i32 { unimplemented ! () } pub fn client_get_minor_version () -> i32 { unimplemented ! () } pub fn client_get_game_state () -> i32 { unimplemented ! () } pub fn client_get_selected_widget_item_id () -> i32 { unimplemented ! () } pub fn client_get_selected_widget_child_id () -> i32 { unimplemented ! () } pub fn client_get_selected_widget_name () -> String { unimplemented ! () } pub fn client_get_selected_widget_action () -> String { unimplemented ! () } pub fn client_is_widget_selected () -> bool { unimplemented ! () } pub fn client_is_resizable_mode () -> bool { unimplemented ! () } pub fn client_get_minimap_zoom () -> i32 { unimplemented ! () } pub fn client_get_minimap_yaw () -> i32 { unimplemented ! () } pub fn client_get_minimap_pitch () -> i32 { unimplemented ! () } pub fn client_is_logged_in () -> bool { unimplemented ! () } pub fn client_is_loading () -> bool { unimplemented ! () } pub fn client_get_current_time () -> i32 { unimplemented ! () } pub fn client_is_member () -> bool { unimplemented ! () } pub fn client_get_account_type () -> AccountType { unimplemented ! () } pub fn client_is_welcome_screen_visible () -> bool { unimplemented ! () } pub fn client_get_welcome_screen_play_widget () -> Option < RSWidget > { unimplemented ! () } pub fn client_get_login_ui_state () -> i32 { unimplemented ! () } pub fn client_get_current_world () -> i32 { unimplemented ! () } pub fn client_is_members_world () -> bool { unimplemented ! () } # [derive (Debug)] pub enum AccountType { Normal , Ironman , UltimateIronman , HardcoreIronman , GroupIronman , HardcoreGroupIronman , Unknown }