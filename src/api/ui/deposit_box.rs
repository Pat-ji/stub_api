static EMPTY_VEC_I8 : Vec < i8 > = vec ! [] ; static EMPTY_VEC_I32 : Vec < i32 > = vec ! [] ; use crate :: api :: domain :: item :: Item ; use crate :: api :: domain :: item_node :: RSItemNode ; use crate :: api :: domain :: object :: Object ; use crate :: api :: domain :: widget :: RSWidget ; use crate :: api :: input :: keyboard :: keyboard_type_escape ; use crate :: api :: item_nodes :: item_nodes_get_item_node ; use crate :: api :: scene :: objects :: { objects_find_closest_conditional , OBJECTS_INTERACTABLE_OBJECT_FLAG } ; use crate :: api :: ui :: chatbox :: chatbox_enter_amount ; use crate :: api :: ui :: tab :: equipment :: equipment_is_empty ; use crate :: api :: ui :: tab :: inventory :: inventory_is_empty ; use crate :: api :: ui :: tab :: settings :: settings_is_escape_closes_interface ; use crate :: api :: ui :: widgets :: { widgets_get_sub_widget , widgets_get_widget , widgets_is_valid } ; use crate :: api :: util :: utils :: utils_sleep_conditional ; use crate :: api :: varps :: varps_get_value ; const DEPOSIT_BOX_WIDGET_ROOT_ID : i32 = 192 ; const DEPOSIT_BOX_ITEM_CONTAINER_WIDGET_CHILD_ID : i32 = 23 ; const DEPOSIT_BOX_DEPOSIT_INVENTORY_WIDGET_CHILD_ID : i32 = 29 ; const DEPOSIT_BOX_DEPOSIT_EQUIPMENT_WIDGET_CHILD_ID : i32 = 30 ; const DEPOSIT_BOX_DEPOSIT_LOOT_WIDGET_CHILD_ID : i32 = 31 ; const DEPOSIT_BOX_CLOSE_WIDGET_CHILD_ID : i32 = 1 ; const DEPOSIT_BOX_CLOSE_WIDGET_SUB_CHILD_ID : i32 = 11 ; const DEPOSIT_BOX_ITEM_CONTAINER_ID : i32 = 93 ; const DEPOSIT_BOX_QUANTITY_1_CHILD_WIDGET_ID : i32 = 34 ; const DEPOSIT_BOX_QUANTITY_5_CHILD_WIDGET_ID : i32 = 35 ; const DEPOSIT_BOX_QUANTITY_10_CHILD_WIDGET_ID : i32 = 36 ; const DEPOSIT_BOX_QUANTITY_X_CHILD_WIDGET_ID : i32 = 37 ; const DEPOSIT_BOX_QUANTITY_ALL_CHILD_WIDGET_ID : i32 = 38 ; const DEPOSIT_BOX_SELECTED_OPTION_VALUE_VARP : i32 = 867 ; const DEPOSIT_BOX_SELECTED_OPTION_VALUE_VARP_SHIFT : i32 = 28 ; const DEPOSIT_BOX_SELECTED_OPTION_VALUE_VARP_MASK : i32 = 0b111 ; const DEPOSIT_BOX_SELECTED_X_AMOUNT_VARP : i32 = 1794 ; const DEPOSIT_BOX_OBJECT_PREDICATE : fn (& dyn Object) -> bool = | object | { let name : String = object . get_name () ; match name . to_lowercase () . as_str () { "bank deposit box" => object . has_any_action (& ["Bank" , "Use" , "Deposit"]) , _ => false } } ; pub fn deposit_box_is_open () -> bool { unimplemented ! () } pub fn deposit_box_open () -> bool { unimplemented ! () } pub fn deposit_box_close () -> bool { unimplemented ! () } pub fn deposit_box_item_container_widget () -> Option < RSWidget > { unimplemented ! () } pub fn deposit_box_deposit_inventory () -> bool { unimplemented ! () } pub fn deposit_box_deposit_equipment () -> bool { unimplemented ! () } pub fn deposit_box_deposit_loot () -> bool { unimplemented ! () } fn deposit_box_get_selected_option_value () -> i32 { unimplemented ! () } pub fn deposit_box_get_selected_x_amount () -> i32 { unimplemented ! () } pub fn deposit_box_has_amount_selected (amount : i32) -> bool { unimplemented ! () } pub fn deposit_box_set_deposit_amount (amount : i32) -> bool { unimplemented ! () } pub fn deposit_box_get_items () -> impl Iterator < Item = Item > { std :: iter :: empty () }