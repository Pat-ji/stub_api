static EMPTY_VEC_I8 : Vec < i8 > = vec ! [] ; static EMPTY_VEC_I32 : Vec < i32 > = vec ! [] ; use crate :: api :: domain :: entity :: Entity ; use crate :: api :: domain :: item :: Item ; use crate :: api :: domain :: item_node :: RSItemNode ; use crate :: api :: domain :: npc :: RSNpc ; use crate :: api :: domain :: object :: Object ; use crate :: api :: domain :: widget :: RSWidget ; use crate :: api :: input :: keyboard :: keyboard_type_escape ; use crate :: api :: input :: mouse :: mouse_scroll ; use crate :: api :: item_nodes :: { item_nodes_contains_all , item_nodes_contains_any , item_nodes_get_amount , item_nodes_get_item_node } ; use crate :: api :: scene :: coords :: position :: Position ; use crate :: api :: scene :: map :: { map_find_distance_to_object , map_find_distance_to_position , MAP_GET_SIZE } ; use crate :: api :: scene :: npcs :: npcs_find_closest_conditional ; use crate :: api :: scene :: objects :: { objects_find_at_conditional , objects_find_closest_conditional , OBJECTS_INTERACTABLE_OBJECT_FLAG } ; use crate :: api :: scene :: players :: players_get_local_player ; use crate :: api :: scene :: region :: region_get_local_collision_flags ; use crate :: api :: script :: script_state :: ScriptState ; use crate :: api :: ui :: chatbox :: chatbox_enter_amount ; use crate :: api :: ui :: tab :: equipment :: equipment_is_empty ; use crate :: api :: ui :: tab :: inventory :: { inventory_find_all_by_id , inventory_find_all_by_name , inventory_find_all_except_by_id , inventory_find_all_except_by_name , inventory_find_by_id , inventory_find_by_name , inventory_get_amount_by_id , inventory_is_empty } ; use crate :: api :: ui :: tab :: settings :: settings_is_escape_closes_interface ; use crate :: api :: ui :: widgets :: { widgets_get_sub_widget , widgets_get_widget , widgets_is_valid , widgets_is_widget_visible } ; use crate :: api :: util :: bot :: bot_get_script_state ; use crate :: api :: util :: find_args :: { IdArgs , NameArgs } ; use crate :: api :: util :: random :: random_from_normal ; use crate :: api :: util :: utils :: { utils_sleep , utils_sleep_conditional } ; use crate :: api :: varps :: varps_get_value ; use std :: collections :: HashSet ; const BANK_CURRENT_SELECTED_TAB_VARP : i32 = 115 ; const BANK_CURRENT_SELECTED_TAB_VARP_MASK : i32 = 0xFF ; const BANK_CURRENT_SELECTED_TAB_VARP_SHIFT : i32 = 4 ; const BANK_REARRANGE_MODE_VARP : i32 = 304 ; const BANK_REARRANGE_MODE_VARP_MASK : i32 = 1 ; const BANK_WITHDRAW_MODE_VARP : i32 = 115 ; const BANK_WITHDRAW_MODE_VARP_MASK : i32 = 1 ; const BANK_MAIN_TAB_INDEX : i32 = 0 ; const BANK_MAX_TAB_COUNT : i32 = 10 ; const BANK_ITEM_CONTAINER_ID : i32 = 95 ; const BANK_WIDGET_ROOT_ID : i32 = 12 ; const BANK_ITEM_CONTAINER_WIDGET_CHILD_ID : i32 = 13 ; const BANK_CAPACITY_WIDGET_CHILD_ID : i32 = 9 ; const BANK_AMOUNT_WIDGET_CHILD_ID : i32 = 5 ; const BANK_DEPOSIT_INVENTORY_WIDGET_CHILD_ID : i32 = 44 ; const BANK_DEPOSIT_EQUIPMENT_WIDGET_CHILD_ID : i32 = 46 ; const BANK_DEFAULT_QUANTITY_VARP : i32 = 1666 ; const BANK_DEFAULT_QUANTITY_MASK : i32 = 0x1C ; const BANK_DEFAULT_QUANTITY_SHIFT : i32 = 2 ; const BANK_CLOSE_WIDGET_CHILD_ID : i32 = 2 ; const BANK_CLOSE_WIDGET_SUB_CHILD_ID : i32 = 11 ; const BANK_BANK_SPACE_WIDGET_ID : i32 = 289 ; const BANK_BANK_SPACE_CHILD_WIDGET_ID : i32 = 7 ; const BANK_CONFIRM_PIN_WIDGET_ID : i32 = 14 ; const BANK_CONFIRM_PIN_CHILD_WIDGET_ID : i32 = 33 ; const BANK_TAB_VARPS : [i32 ; 5] = [867 , 1052 , 1053 , 1793 , 3750] ; const BANK_OBJECT_PREDICATE : fn (& dyn Object) -> bool = | object | { let name : String = object . get_name () ; match name . to_lowercase () . as_str () { "bank booth" | "open chest" | "grand exchange booth" | "bank table" => object . has_action ("Bank") , "bank chest" | "bank chest-wreck" => object . has_any_action (& ["Use" , "Open" , "Bank"]) , _ => false } } ; const BANK_NPC_PREDICATE : fn (& RSNpc) -> bool = | npc | { npc . has_action ("Bank") } ; pub fn bank_is_open () -> bool { unimplemented ! () } pub fn bank_open () -> bool { unimplemented ! () } pub fn bank_close () -> bool { unimplemented ! () } fn bank_get_bank_space_widget () -> Option < RSWidget > { unimplemented ! () } fn bank_get_confirm_pin_widget () -> Option < RSWidget > { unimplemented ! () } pub fn bank_close_popup () -> bool { unimplemented ! () } pub fn bank_get_rearrange_mode () -> RearrangeMode { unimplemented ! () } pub fn bank_get_withdraw_mode () -> WithdrawMode { unimplemented ! () } pub fn bank_set_rearrange_mode (mode : & RearrangeMode) -> bool { unimplemented ! () } pub fn bank_set_withdraw_mode (mode : & WithdrawMode) -> bool { unimplemented ! () } pub fn bank_get_selected_x_amount () -> i32 { unimplemented ! () } pub fn bank_get_selected_tab () -> i32 { unimplemented ! () } pub fn bank_get_item_container_widget () -> Option < RSWidget > { unimplemented ! () } pub fn bank_get_capacity () -> i32 { unimplemented ! () } pub fn bank_get_amount () -> i32 { unimplemented ! () } pub fn bank_deposit_inventory () -> bool { unimplemented ! () } pub fn bank_deposit_equipment () -> bool { unimplemented ! () } pub fn get_amount_for_tab (tab : i32) -> i32 { unimplemented ! () } pub fn bank_get_default_quantity () -> i32 { unimplemented ! () } pub fn bank_get_default_quantity_action () -> Option < String > { unimplemented ! () } pub fn bank_deposit_by_id < T : Into < IdArgs > > (args : T , amount : i32) -> bool { unimplemented ! () } pub fn bank_deposit_by_name < T : Into < NameArgs > > (args : T , amount : i32) -> bool { unimplemented ! () } pub fn bank_deposit_all_by_id < T : Into < IdArgs > > (args : T) -> bool { unimplemented ! () } pub fn bank_deposit_all_by_name < T : Into < NameArgs > > (args : T) -> bool { unimplemented ! () } pub fn bank_deposit_all_except_by_id < T : Into < IdArgs > > (args : T) -> bool { unimplemented ! () } pub fn bank_deposit_all_except_by_name < T : Into < NameArgs > > (args : T) -> bool { unimplemented ! () } pub fn bank_withdraw_by_id < T : Into < IdArgs > > (args : T , amount : i32) -> bool { unimplemented ! () } pub fn bank_withdraw_by_name < T : Into < NameArgs > > (args : T , amount : i32) -> bool { unimplemented ! () } pub fn bank_get_item_visibility (item : & Item) -> i32 { unimplemented ! () } pub fn bank_scroll_to_item (item : & Item) -> bool { unimplemented ! () } fn bank_deposit_items (items : Vec < Item > , amount : i32) -> bool { unimplemented ! () } fn bank_deposit (item : & Item , amount : i32) -> bool { unimplemented ! () } fn bank_withdraw (item : & Item , amount : i32) -> bool { unimplemented ! () } pub fn bank_get_amount_by_id (id : i32) -> i64 { unimplemented ! () } pub fn bank_get_amount_by_name (name : & str) -> i64 { unimplemented ! () } pub fn bank_contains_by_id (id : i32) -> bool { unimplemented ! () } pub fn bank_contains_by_name (name : & str) -> bool { unimplemented ! () } pub fn bank_contains_any_by_id < T : Into < IdArgs > > (args : T) -> bool { unimplemented ! () } pub fn bank_contains_any_by_name < T : Into < NameArgs > > (args : T) -> bool { unimplemented ! () } pub fn bank_contains_all_by_id (ids : & [i32]) -> bool { unimplemented ! () } pub fn bank_contains_all_by_name < T : Into < NameArgs > > (args : T) -> bool { unimplemented ! () } pub fn bank_find_by_id < T : Into < IdArgs > > (args : T) -> Option < Item > { unimplemented ! () } pub fn bank_find_by_name < T : Into < NameArgs > > (args : T) -> Option < Item > { unimplemented ! () } pub fn bank_find_all_by_id < T : Into < IdArgs > > (args : T) -> impl Iterator < Item = Item > { std :: iter :: empty () } pub fn bank_find_all_by_name < T : Into < NameArgs > > (args : T) -> impl Iterator < Item = Item > { std :: iter :: empty () } pub fn bank_get_items () -> impl Iterator < Item = Item > { std :: iter :: empty () } # [derive (Debug , PartialEq)] pub enum RearrangeMode { Swap , Insert } impl RearrangeMode { pub fn get_widget_id (& self) -> i32 { unimplemented ! () } pub fn get_action (& self) -> & str { unimplemented ! () } } # [derive (Debug , PartialEq)] pub enum WithdrawMode { Item , Note } impl WithdrawMode { pub fn get_widget_id (& self) -> i32 { unimplemented ! () } pub fn get_action (& self) -> & str { unimplemented ! () } }