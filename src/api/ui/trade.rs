static EMPTY_VEC_I8 : Vec < i8 > = vec ! [] ; static EMPTY_VEC_I32 : Vec < i32 > = vec ! [] ; use crate :: api :: domain :: item :: Item ; use crate :: api :: domain :: item_node :: RSItemNode ; use crate :: api :: domain :: widget :: RSWidget ; use crate :: api :: item_nodes :: item_nodes_get_item_node ; use crate :: api :: script :: script_state :: { script_get_state , ScriptState } ; use crate :: api :: ui :: widgets :: { widgets_get_widget , widgets_is_valid } ; use crate :: api :: util :: utils :: utils_sleep ; const TRADE_TRADING_WIDGET_ID : i32 = 335 ; const TRADE_TRADING_ACCEPT_WIDGET_CHILD_ID : i32 = 12 ; const TRADE_TRADING_DECLINE_WIDGET_CHILD_ID : i32 = 14 ; const TRADE_CONFIRMATION_WIDGET_ID : i32 = 334 ; const TRADE_CONFIRMATION_ACCEPT_WIDGET_CHILD_ID : i32 = 12 ; const TRADE_CONFIRMATION_DECLINE_WIDGET_CHILD_ID : i32 = 13 ; const TRADE_OUR_ITEM_CONTAINER_WIDGET_ID : i32 = 25 ; const TRADE_THEIR_ITEM_CONTAINER_WIDGET_ID : i32 = 28 ; const TRADE_OUR_ITEM_CONTAINER_ID : i32 = 90 ; const TRADE_THEIR_ITEM_CONTAINER_ID : i32 = 32858 ; pub fn trade_is_in_trade_screen () -> bool { unimplemented ! () } pub fn trade_is_in_confirmation_screen () -> bool { unimplemented ! () } pub fn trade_is_trading () -> bool { unimplemented ! () } pub fn trade_get_our_items () -> impl Iterator < Item = Item > { std :: iter :: empty () } pub fn trade_get_their_items () -> impl Iterator < Item = Item > { std :: iter :: empty () } pub fn trade_accept_trade () -> bool { unimplemented ! () } pub fn trade_decline_trade () -> bool { unimplemented ! () } fn trade_get_items (item_container_id : i32 , container_widget_id : i32) -> impl Iterator < Item = Item > { std :: iter :: empty () }