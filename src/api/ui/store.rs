static EMPTY_VEC_I8 : Vec < i8 > = vec ! [] ; static EMPTY_VEC_I32 : Vec < i32 > = vec ! [] ; use crate :: api :: domain :: item :: Item ; use crate :: api :: domain :: widget :: RSWidget ; use crate :: api :: script :: script_state :: { script_get_state , ScriptState } ; use crate :: api :: ui :: tab :: inventory :: { inventory_find_by_id , inventory_get_amount_by_id } ; use crate :: api :: ui :: widgets :: { widgets_get_sub_widget , widgets_get_widget , widgets_is_valid } ; use crate :: api :: util :: find_args :: { IdArgs , NameArgs } ; use crate :: api :: util :: utils :: utils_sleep_conditional ; const STORE_WIDGET_ROOT_ID : i32 = 300 ; const STORE_ITEM_CONTAINER_WIDGET_CHILD_ID : i32 = 16 ; const STORE_CLOSE_WIDGET_CHILD_ID : i32 = 1 ; const STORE_CLOSE_WIDGET_SUB_CHILD_ID : i32 = 11 ; pub fn store_is_open () -> bool { unimplemented ! () } pub fn store_close () -> bool { unimplemented ! () } pub fn store_get_item_container_widget () -> Option < RSWidget > { unimplemented ! () } pub fn store_buy (item : & Item , amount : i32) -> bool { unimplemented ! () } pub fn store_sell (item : & Item , amount : i32) -> bool { unimplemented ! () } pub fn store_contains_any_by_id < T : Into < IdArgs > > (args : T) -> bool { unimplemented ! () } pub fn store_contains_any_by_name < T : Into < NameArgs > > (args : T) -> bool { unimplemented ! () } pub fn store_find_by_id < T : Into < IdArgs > > (args : T) -> Option < Item > { unimplemented ! () } pub fn store_find_by_name < T : Into < NameArgs > > (args : T) -> Option < Item > { unimplemented ! () } pub fn store_get_items () -> impl Iterator < Item = Item > { std :: iter :: empty () }