static EMPTY_VEC_I8 : Vec < i8 > = vec ! [] ; static EMPTY_VEC_I32 : Vec < i32 > = vec ! [] ; use crate :: api :: client :: { _client_get_valid_widgets , _client_get_widget_root , _client_get_widgets } ; use crate :: api :: domain :: widget :: RSWidget ; use crate :: c_address :: CAddress ; use crate :: offsets ; pub fn widgets_get_all () -> Vec < Vec < RSWidget > > { Vec :: new () } pub fn widgets_get_widget (root_id : i32 , child_id : i32) -> Option < RSWidget > { unimplemented ! () } pub fn widgets_find_widget (root_id : i32 , predicate : impl Fn (& RSWidget) -> bool) -> Option < RSWidget > { unimplemented ! () } pub fn widgets_get_sub_widget (root_id : i32 , child_id : i32 , sub_child_id : i32) -> Option < RSWidget > { unimplemented ! () } pub fn widgets_find_sub_widget (root_id : i32 , child_id : i32 , predicate : impl Fn (& RSWidget) -> bool) -> Option < RSWidget > { unimplemented ! () } pub fn widgets_is_valid (root_id : i32) -> bool { unimplemented ! () } pub fn widgets_is_root_visible (root_id : i32) -> bool { unimplemented ! () } pub fn widgets_has_any_visible_child (root_id : i32) -> bool { unimplemented ! () } pub fn widgets_is_widget_visible (root_id : i32 , child_id : i32) -> bool { unimplemented ! () } pub fn widget_get_valid_widgets () -> Vec < bool > { Vec :: new () } pub fn widgets_get_parent_node_uuid (root_id : i32) -> i32 { unimplemented ! () }