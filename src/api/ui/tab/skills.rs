static EMPTY_VEC_I8 : Vec < i8 > = vec ! [] ; static EMPTY_VEC_I32 : Vec < i32 > = vec ! [] ; use serde :: { Deserialize , Serialize } ; use crate :: api :: client :: { _client_get_current_levels , _client_get_experience , _client_get_max_levels } ; use strum :: IntoEnumIterator ; use strum_macros :: EnumIter ; pub const SKILLS_MAX_LEVEL : i32 = 126 ; pub fn skills_get_current_level (skill : & Skill) -> i32 { unimplemented ! () } pub fn skills_get_max_level (skill : & Skill) -> i32 { unimplemented ! () } pub fn skills_get_experience (skill : & Skill) -> i32 { unimplemented ! () } pub fn skills_get_experiences () -> Vec < i32 > { Vec :: new () } pub fn skills_get_experience_until_level (skill : & Skill) -> i32 { unimplemented ! () } pub fn skills_get_virtual_level (skill : & Skill) -> i32 { unimplemented ! () } pub fn skills_get_virtual_level_for_experience (exp : i32) -> i32 { unimplemented ! () } pub fn skills_get_experience_for_level (level : i32) -> i32 { unimplemented ! () } # [derive (Debug , PartialEq , Copy , Clone , EnumIter , Serialize , Deserialize)] pub enum Skill { Attack , Defence , Strength , Hitpoints , Ranged , Prayer , Magic , Cooking , Woodcutting , Fletching , Fishing , Firemaking , Crafting , Smithing , Mining , Herblore , Agility , Thieving , Slayer , Farming , Runecrafting , Hunter , Construction , Sailing } impl Skill { pub fn get_index (& self) -> i32 { unimplemented ! () } }