static EMPTY_VEC_I8 : Vec < i8 > = vec ! [] ; static EMPTY_VEC_I32 : Vec < i32 > = vec ! [] ; use crate :: api :: def :: item_definitions :: item_definitions_for_id ; use crate :: api :: domain :: item :: Item ; use crate :: api :: item_nodes :: { item_nodes_contains_all , item_nodes_contains_any , item_nodes_get_ids , item_nodes_get_item_node , item_nodes_is_empty } ; use crate :: api :: ui :: tab :: inventory :: inventory_interact_any ; use crate :: api :: ui :: tab :: tabs :: { tabs_open_tab , Tab } ; use crate :: api :: ui :: widgets :: widgets_get_widget ; use crate :: api :: util :: find_args :: { IdArgs , NameArgs } ; use crate :: api :: util :: utils :: utils_sleep_conditional ; use std :: collections :: HashSet ; use serde :: { Deserialize , Serialize } ; use strum_macros :: EnumIter ; const EQUIPMENT_CAPACITY : usize = 14 ; const EQUIPMENT_ITEM_CONTAINER_ID : i32 = 94 ; const EQUIPMENT_WIDGET_ID : i32 = 387 ; pub fn equipment_is_empty () -> bool { unimplemented ! () } pub fn equipment_get_capacity () -> i32 { unimplemented ! () } pub fn equipment_contains_by_id (id : i32) -> bool { unimplemented ! () } pub fn equipment_contains_by_name (name : & str) -> bool { unimplemented ! () } pub fn equipment_contains_by_name_contains (name : & str) -> bool { unimplemented ! () } pub fn equipment_contains_any_by_id < T : Into < IdArgs > > (args : T) -> bool { unimplemented ! () } pub fn equipment_contains_any_by_name < T : Into < NameArgs > > (args : T) -> bool { unimplemented ! () } pub fn equipment_contains_all_by_id (ids : & [i32]) -> bool { unimplemented ! () } pub fn equipment_contains_all_by_name < T : Into < NameArgs > > (args : T) -> bool { unimplemented ! () } pub fn equipment_find_by_id < T : Into < IdArgs > > (args : T) -> Option < Item > { unimplemented ! () } pub fn equipment_find_by_name < T : Into < NameArgs > > (args : T) -> Option < Item > { unimplemented ! () } pub fn equipment_find_by_name_contains < T : Into < NameArgs > > (args : T) -> Option < Item > { unimplemented ! () } pub fn equipment_find_conditional (predicate : impl Fn (& Item) -> bool) -> Option < Item > { unimplemented ! () } pub fn equipment_is_wearing_item (item : & Item) -> bool { unimplemented ! () } pub fn equipment_equip (item : & Item) -> bool { unimplemented ! () } pub fn equipment_unequip (item : & Item) -> bool { unimplemented ! () } pub fn equipment_interact (item : & Item , action : & str) -> bool { unimplemented ! () } pub fn equipment_interact_any (item : & Item , actions : & [& str]) -> bool { unimplemented ! () } pub fn equipment_get_item_in_slot (equipment_slot : & EquipmentSlot) -> Option < Item > { unimplemented ! () } pub fn equipment_get_items () -> [Option < Item > ; EQUIPMENT_CAPACITY] { unimplemented ! () } # [derive (Debug , Copy , Clone , EnumIter , Serialize , Deserialize)] pub enum EquipmentSlot { Head , Cape , Amulet , Weapon , Body , Shield , Arms , Legs , Hair , Gloves , Boots , Jaw , Ring , Ammo } impl EquipmentSlot { pub fn get_index (& self) -> i32 { unimplemented ! () } pub fn from_index (index : i32) -> Option < Self > { unimplemented ! () } pub fn get_widget_id (& self) -> i32 { unimplemented ! () } }