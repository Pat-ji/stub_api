static EMPTY_VEC_I8 : Vec < i8 > = vec ! [] ; static EMPTY_VEC_I32 : Vec < i32 > = vec ! [] ; use crate :: api :: client :: { client_get_selected_widget_child_id , client_get_selected_widget_item_id , client_get_selected_widget_name , client_is_widget_selected } ; use crate :: api :: def :: item_definitions :: item_definitions_for_id ; use crate :: api :: domain :: item :: Item ; use crate :: api :: domain :: widget :: RSWidget ; use crate :: api :: input :: keyboard :: keyboard_press_shift ; use crate :: api :: item_nodes :: { item_nodes_contains_all , item_nodes_contains_any , item_nodes_get_amount , item_nodes_get_count , item_nodes_get_ids , item_nodes_get_item_node , item_nodes_is_empty , item_nodes_is_full } ; use crate :: api :: script :: script_state :: { script_get_state , ScriptState } ; use crate :: api :: ui :: menu :: menu_close ; use crate :: api :: ui :: tab :: settings :: settings_is_shift_dropping_enabled ; use crate :: api :: ui :: tab :: tabs :: { tabs_open_tab , Tab } ; use crate :: api :: ui :: widgets :: widgets_get_widget ; use crate :: api :: util :: find_args :: { IdArgs , NameArgs } ; use crate :: api :: util :: random :: random_from_normal ; use crate :: api :: util :: utils :: { utils_sleep , utils_sleep_conditional } ; use std :: collections :: HashSet ; pub const INVENTORY_CAPACITY : usize = 28 ; const INVENTORY_ITEM_CONTAINER_ID : i32 = 93 ; const INVENTORY_INVENTORY_WIDGET_ID : i32 = 149 ; const INVENTORY_INVENTORY_ITEM_CHILD_ID : i32 = 0 ; const INVENTORY_BANK_WIDGET_ID : i32 = 15 ; const INVENTORY_BANK_CHILD_ID : i32 = 3 ; const INVENTORY_TRADING_WIDGET_ID : i32 = 336 ; const INVENTORY_TRADING_CHILD_ID : i32 = 0 ; const INVENTORY_GRAND_EXCHANGE_WIDGET_ID : i32 = 467 ; const INVENTORY_GRAND_EXCHANGE_CHILD_ID : i32 = 0 ; const INVENTORY_SHOP_WIDGET_ID : i32 = 301 ; const INVENTORY_SHOP_CHILD_ID : i32 = 0 ; const INVENTORY_WIDGET_IDS : & [[i32 ; 2]] = & [[INVENTORY_INVENTORY_WIDGET_ID , INVENTORY_INVENTORY_ITEM_CHILD_ID] , [INVENTORY_BANK_WIDGET_ID , INVENTORY_BANK_CHILD_ID] , [INVENTORY_GRAND_EXCHANGE_WIDGET_ID , INVENTORY_GRAND_EXCHANGE_CHILD_ID] , [INVENTORY_SHOP_WIDGET_ID , INVENTORY_SHOP_CHILD_ID] , [INVENTORY_TRADING_WIDGET_ID , INVENTORY_TRADING_CHILD_ID] ,] ; fn inventory_get_widget () -> Option < RSWidget > { unimplemented ! () } pub fn inventory_is_empty () -> bool { unimplemented ! () } pub fn inventory_is_full () -> bool { unimplemented ! () } pub fn inventory_get_capacity () -> i32 { unimplemented ! () } pub fn inventory_get_count () -> i32 { unimplemented ! () } pub fn inventory_get_empty_slot_count () -> i32 { unimplemented ! () } pub fn inventory_is_empty_except_by_id < T : Into < IdArgs > > (args : T) -> bool { unimplemented ! () } pub fn inventory_is_empty_except_by_name < T : Into < NameArgs > > (args : T) -> bool { unimplemented ! () } pub fn inventory_get_amount_by_id (id : i32) -> i64 { unimplemented ! () } pub fn inventory_get_amount_by_name (name : & str) -> i64 { unimplemented ! () } pub fn inventory_contains_by_id (id : i32) -> bool { unimplemented ! () } pub fn inventory_contains_by_name (name : & str) -> bool { unimplemented ! () } pub fn inventory_contains_by_name_contains (name : & str) -> bool { unimplemented ! () } pub fn inventory_contains_any_by_id < T : Into < IdArgs > > (args : T) -> bool { unimplemented ! () } pub fn inventory_contains_any_by_name < T : Into < NameArgs > > (args : T) -> bool { unimplemented ! () } pub fn inventory_contains_all_by_id (ids : & [i32]) -> bool { unimplemented ! () } pub fn inventory_contains_all_by_name < T : Into < NameArgs > > (args : T) -> bool { unimplemented ! () } pub fn inventory_interact_by_id < T : Into < IdArgs > > (args : T , action : & str) -> bool { unimplemented ! () } pub fn inventory_interact_by_name < T : Into < NameArgs > > (args : T , action : & str) -> bool { unimplemented ! () } pub fn inventory_is_item_selected () -> bool { unimplemented ! () } pub fn inventory_get_selected_item_id () -> Option < i32 > { unimplemented ! () } pub fn inventory_get_selected_item_index () -> Option < i32 > { unimplemented ! () } pub fn inventory_get_selected_item_name () -> Option < String > { unimplemented ! () } pub fn inventory_contains_conditional (predicate : impl Fn (& Item) -> bool) -> bool { unimplemented ! () } pub fn inventory_find_by_id < T : Into < IdArgs > > (args : T) -> Option < Item > { unimplemented ! () } pub fn inventory_find_by_name < T : Into < NameArgs > > (args : T) -> Option < Item > { unimplemented ! () } pub fn inventory_find_by_name_contains < T : Into < NameArgs > > (args : T) -> Option < Item > { unimplemented ! () } pub fn inventory_find_all_by_id < T : Into < IdArgs > > (args : T) -> impl Iterator < Item = Item > { std :: iter :: empty () } pub fn inventory_find_all_by_name < T : Into < NameArgs > > (args : T) -> impl Iterator < Item = Item > { std :: iter :: empty () } pub fn inventory_find_all_except_by_id < T : Into < IdArgs > > (args : T) -> impl Iterator < Item = Item > { std :: iter :: empty () } pub fn inventory_find_all_except_by_name < T : Into < NameArgs > > (args : T) -> impl Iterator < Item = Item > { std :: iter :: empty () } pub fn inventory_find_conditional (predicate : impl Fn (& Item) -> bool) -> Option < Item > { unimplemented ! () } pub fn inventory_find_all_conditional (predicate : impl Fn (& Item) -> bool) -> impl Iterator < Item = Item > { std :: iter :: empty () } pub fn inventory_drop_all_by_id < T : Into < IdArgs > > (args : T) -> bool { unimplemented ! () } pub fn inventory_drop_all_except_by_id < T : Into < IdArgs > > (args : T) -> bool { unimplemented ! () } fn inventory_drop_all (items : Vec < Item >) -> bool { unimplemented ! () } pub fn inventory_interact (item : & Item , action : & str) -> bool { unimplemented ! () } pub fn inventory_interact_any (item : & Item , actions : & [& str]) -> bool { unimplemented ! () } pub fn inventory_deselect_item () -> bool { unimplemented ! () } pub fn inventory_get_item_in_slot (slot_id : i32) -> Option < Item > { unimplemented ! () } pub fn inventory_get_selected_item () -> Option < Item > { unimplemented ! () } pub fn inventory_get_items () -> [Option < Item > ; INVENTORY_CAPACITY] { unimplemented ! () }