static EMPTY_VEC_I8 : Vec < i8 > = vec ! [] ; static EMPTY_VEC_I32 : Vec < i32 > = vec ! [] ; use crate :: api :: client :: { client_get_selected_widget_name , client_is_widget_selected } ; use crate :: api :: domain :: widget :: RSWidget ; use crate :: api :: ui :: tab :: skills :: { skills_get_max_level , Skill } ; use crate :: api :: ui :: tab :: tabs :: { tabs_get_tab_widget , tabs_open_tab , Tab } ; use crate :: api :: ui :: widgets :: widgets_get_widget ; use crate :: api :: util :: utils :: { utils_remove_tag , utils_sleep_conditional } ; use crate :: api :: varps :: varps_get_value ; use strum :: IntoEnumIterator ; use strum_macros :: EnumIter ; const MAGIC_CURRENT_BOOK_VARP : i32 = 439 ; const MAGIC_CURRENT_BOOK_VARP_MASK : i32 = 0b11 ; const MAGIC_WIDGET_ID : i32 = 218 ; pub fn magic_get_current_book () -> Book { unimplemented ! () } pub fn magic_has_required_level < T : MagicSpell > (spell : & T) -> bool { unimplemented ! () } pub fn magic_has_spell_selected () -> bool { unimplemented ! () } pub fn magic_is_spell_selected < T : MagicSpell > (spell : & T) -> bool { unimplemented ! () } pub fn magic_get_selected_spell_name () -> Option < String > { unimplemented ! () } pub fn magic_get_spell_widget < T : MagicSpell > (spell : & T) -> Option < RSWidget > { unimplemented ! () } pub fn magic_can_cast < T : MagicSpell > (spell : & T) -> bool { unimplemented ! () } pub fn magic_cast_spell < T : MagicSpell > (spell : & T) -> bool { unimplemented ! () } pub fn magic_cast_spell_action < T : MagicSpell > (spell : & T , action : & str) -> bool { unimplemented ! () } pub fn magic_deselect_spell () -> bool { unimplemented ! () } # [derive (Debug , Copy , Clone , PartialEq)] pub enum Book { Normal , Ancient , Lunar , Arceuus } pub trait MagicSpell : { fn get_name (& self) -> & str ; fn get_level (& self) -> i32 ; fn get_widget_id (& self) -> i32 ; fn get_disabled_sprite_id (& self) -> i32 ; fn is_members (& self) -> bool ; fn get_book (& self) -> & Book ; } # [derive (Debug , Copy , Clone , EnumIter)] pub enum NormalSpells { HomeTeleport , WindStrike , Confuse , CrossbowBoltEnchantments , WaterStrike , Lvl1Enchant , EarthStrike , Weaken , FireStrike , BonesToBananas , WindBolt , Curse , Bind , LowLevelAlchemy , WaterBolt , VarrockTeleport , Lvl2Enchant , EarthBolt , LumbridgeTeleport , TelekineticGrab , FireBolt , FaladorTeleport , CrumbleUndead , TeleportToHouse , WindBlast , MonsterInspect , SuperheatItem , CamelotTeleport , WaterBlast , KourendCastleTeleport , Lvl3Enchant , IbanBlast , Snare , MagicDart , ArdougneTeleport , EarthBlast , CivitasIllaFortisTeleport , HighLevelAlchemy , ChargeWaterOrb , Lvl4Enchant , WatchtowerTeleport , FireBlast , ChargeEarthOrb , BonesToPeaches , SaradominStrike , ClawsOfGuthix , FlamesOfZamorak , TrollheimTeleport , WindWave , ChargeFireOrb , TeleportToApeAtoll , WaterWave , ChargeAirOrb , Vulnerability , Lvl5Enchant , EarthWave , Enfeeble , TeleotherLumbridge , FireWave , Entangle , Stun , Charge , WindSurge , TeleotherFalador , TeleBlock , WaterSurge , TeleportToBountyTarget , Lvl6Enchant , TeleotherCamelot , EarthSurge , Lvl7Enchant , FireSurge , } impl MagicSpell for NormalSpells { fn get_name (& self) -> & str { unimplemented ! () } fn get_level (& self) -> i32 { unimplemented ! () } fn get_widget_id (& self) -> i32 { unimplemented ! () } fn get_disabled_sprite_id (& self) -> i32 { unimplemented ! () } fn is_members (& self) -> bool { unimplemented ! () } fn get_book (& self) -> & Book { unimplemented ! () } } # [derive (Debug , Copy , Clone , EnumIter)] pub enum AncientSpells { HomeTeleport , SmokeRush , ShadowRush , PadewwaTeleport , BloodRush , IceRush , SenntistenTeleport , SmokeBurst , ShadowBurst , KharyrllTeleport , BloodBurst , IceBurst , LassarTeleport , SmokeBlitz , ShadowBlitz , DareeyakTeleport , BloodBlitz , IceBlitz , CarrallangarTeleport , TeleportToBountyTarget , SmokeBarrage , ShadowBarrage , AnnakarlTeleport , BloodBarrage , IceBarrage , GhorrockTeleport , } impl MagicSpell for AncientSpells { fn get_name (& self) -> & str { unimplemented ! () } fn get_level (& self) -> i32 { unimplemented ! () } fn get_widget_id (& self) -> i32 { unimplemented ! () } fn get_disabled_sprite_id (& self) -> i32 { unimplemented ! () } fn is_members (& self) -> bool { unimplemented ! () } fn get_book (& self) -> & Book { unimplemented ! () } } # [derive (Debug , Copy , Clone , EnumIter)] pub enum LunarSpells { HomeTeleport , BakePie , Geomancy , CurePlant , MonsterExamine , NpcContact , CureOther , Humidify , MoonclanTeleport , TeleGroupMoonclan , CureMe , OuraniaTeleport , HunterKit , WaterbirthTeleport , TeleGroupWaterbirth , CureGroup , StatSpy , BarbarianTeleport , TeleGroupBarbarian , SpinFlax , SuperglassMake , TanLeather , KhazardTeleport , TeleGroupKhazard , Dream , StringJewellery , StatRestorePotShare , MagicImbue , FertileSoil , BoostPotionShare , FishingGuildTeleport , TeleportToBountyTarget , TeleGroupFishingGuild , PlankMake , CatherbyTeleport , TeleGroupCatherby , RechargeDragonstone , IcePlateauTeleport , TeleGroupIcePlateau , EnergyTransfer , HealOther , VengeanceOther , Vengeance , HealGroup , SpellbookSwap , } impl MagicSpell for LunarSpells { fn get_name (& self) -> & str { unimplemented ! () } fn get_level (& self) -> i32 { unimplemented ! () } fn get_widget_id (& self) -> i32 { unimplemented ! () } fn get_disabled_sprite_id (& self) -> i32 { unimplemented ! () } fn is_members (& self) -> bool { unimplemented ! () } fn get_book (& self) -> & Book { unimplemented ! () } } # [derive (Debug , Copy , Clone , EnumIter)] pub enum ArceuusSpells { ArceuusHomeTeleport , ArceuusLibraryTeleport , BasicReanimation , DraynorManorTeleport , BattlefrontTeleport , MindAltarTeleport , RespawnTeleport , GhostlyGrasp , ResurrectLesserGhost , ResurrectLesserSkeleton , ResurrectLesserZombie , SalveGraveyardTeleport , AdeptReanimation , InferiorDemonbane , ShadowVeil , FenkenstrainsCastleTeleport , DarkLure , SkeletalGrasp , MarkOfDarkness , WestArdougneTeleport , SuperiorDemonbane , LesserCorruption , HarmonyIslandTeleport , VileVigour , Degrime , CemeteryTeleport , ExpertReanimation , WardOfArceuus , ResurrectCrops , UndeadGrasp , DeathCharge , DarkDemonbane , BarrowsTeleport , DemonicOffering , GreaterCorruption , MasterReanimation , ApeAtollTeleport , SinisterOffering , } impl MagicSpell for ArceuusSpells { fn get_name (& self) -> & str { unimplemented ! () } fn get_level (& self) -> i32 { unimplemented ! () } fn get_widget_id (& self) -> i32 { unimplemented ! () } fn get_disabled_sprite_id (& self) -> i32 { unimplemented ! () } fn is_members (& self) -> bool { unimplemented ! () } fn get_book (& self) -> & Book { unimplemented ! () } } # [derive (Debug , PartialEq , EnumIter)] pub enum Rune { Air , Water , Earth , Fire , Mind , Chaos , Death , Blood , Cosmic , Nature , Law , Body , Soul , Astral , Mist , Mud , Dust , Lava , Steam , Smoke , Wrath } impl Rune { pub fn get_id (& self) -> i32 { unimplemented ! () } pub fn get_name (& self) -> & str { unimplemented ! () } pub fn get_for_id (id : i32) -> Option < Rune > { unimplemented ! () } pub fn get_for_name (name : & str) -> Option < Rune > { unimplemented ! () } } # [derive (Debug , PartialEq , EnumIter)] pub enum Staves { StaffOfAir , StaffOfWater , StaffOfEarth , StaffOfFire , BattlestaffAir , BattlestaffWater , BattlestaffEarth , BattlestaffFire , BattlestaffLava , BattlestaffMud , BattlestaffSteam , BattlestaffSmoke , BattlestaffMist , BattlestaffDust , MysticAir , MysticWater , MysticEarth , MysticFire , MysticLava , MysticMud , MysticSteam , MysticSmoke , MysticMist , MysticDust , } impl Staves { pub fn get_name (& self) -> & str { unimplemented ! () } pub fn get_runes (& self) -> & [Rune] { unimplemented ! () } }