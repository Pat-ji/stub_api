static EMPTY_VEC_I8 : Vec < i8 > = vec ! [] ; static EMPTY_VEC_I32 : Vec < i32 > = vec ! [] ; use crate :: api :: client :: _client_get_region_loader ; use crate :: api :: display :: DISPLAY_LOCAL_COORD_BITS ; use crate :: api :: scene :: coords :: position :: Position ; use crate :: c_address :: CAddress ; use crate :: offsets ; const INSTANCE_TEMPLATE_CHUNK_SIZE : i32 = 8 ; const INSTANCE_TEMPLATE_ARRAY_SIZE : usize = 13 ; pub fn instance_template_from_position (position : & Position) -> Option < InstanceTemplate > { unimplemented ! () } pub fn instance_template_from_grid (grid_x : i32 , grid_y : i32 , plane : i32) -> Option < InstanceTemplate > { unimplemented ! () } pub fn instance_template_region_id_from_position (position : & Position) -> i32 { unimplemented ! () } pub fn instance_template_region_id_from_grid (grid_x : i32 , grid_y : i32 , plane : i32) -> i32 { unimplemented ! () } pub fn instance_template_position_to_world (position : & Position) -> Option < Position > { unimplemented ! () } pub fn instance_template_grid_to_world (grid_x : i32 , grid_y : i32 , plane : i32) -> Option < Position > { unimplemented ! () } fn instance_template_get_template (x : i32 , y : i32 , plane : i32) -> Option < InstanceTemplate > { unimplemented ! () } fn rotate (point : & Position , rotation : i32) -> Position { unimplemented ! () } # [derive (Debug)] pub struct InstanceTemplate { x : i32 , y : i32 , plane : i32 , rotation : i32 } impl InstanceTemplate { pub (crate) fn new (x : i32 , y : i32 , plane : i32 , rotation : i32) -> Self { unimplemented ! () } pub fn get_x (& self) -> i32 { unimplemented ! () } pub fn get_y (& self) -> i32 { unimplemented ! () } pub fn get_plane (& self) -> i32 { unimplemented ! () } pub fn get_rotation (& self) -> i32 { unimplemented ! () } }