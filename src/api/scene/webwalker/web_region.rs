static EMPTY_VEC_I8 : Vec < i8 > = vec ! [] ; static EMPTY_VEC_I32 : Vec < i32 > = vec ! [] ; use crate :: api :: scene :: coords :: position :: Position ; use crate :: api :: scene :: webwalker :: web_connection :: WebConnection ; pub (in crate :: api :: scene :: webwalker) const WEB_REGION_SIZE : usize = 64 ; pub struct WebRegion { base_x : i32 , base_y : i32 , plane : i32 , flags : Vec < i32 > , connections : Vec < WebConnection > , } impl WebRegion { pub (crate) fn new (base_x : i32 , base_y : i32 , plane : i32 , flags : Vec < i32 > , connections : Vec < WebConnection >) -> Self { unimplemented ! () } pub fn get_base_x (& self) -> i32 { unimplemented ! () } pub fn get_base_y (& self) -> i32 { unimplemented ! () } pub fn get_plane (& self) -> i32 { unimplemented ! () } pub fn get_flags (& self) -> & Vec < i32 > { & EMPTY_VEC_I32 } pub fn get_connections (& self) -> & Vec < WebConnection > { unimplemented ! () } pub (crate) fn get_flag (& self , x : i32 , y : i32) -> i32 { unimplemented ! () } pub (crate) fn get_connections_from < 'a > (& 'a self , world_x : i32 , world_y : i32) -> impl Iterator < Item = & 'a WebConnection > + 'a { std :: iter :: empty () } pub (crate) fn get_connection (& self , from : & Position , target : & Position) -> Option < WebConnection > { unimplemented ! () } pub (crate) fn get_connection_targets_from (& self , world_x : i32 , world_y : i32) -> Vec < (i32 , i32 , i32) > { Vec :: new () } } pub (crate) fn web_region_world_to_id (x : i32 , y : i32 , plane : i32) -> i32 { unimplemented ! () } pub (crate) fn web_region_id_to_world_base (region_id : i32) -> (i32 , i32 , i32) { unimplemented ! () }