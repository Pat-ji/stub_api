static EMPTY_VEC_I8 : Vec < i8 > = vec ! [] ; static EMPTY_VEC_I32 : Vec < i32 > = vec ! [] ; use crate :: api :: domain :: entity :: Entity ; use crate :: api :: scene :: coords :: position :: Position ; use crate :: api :: scene :: objects :: { objects_find_at_position_conditional , OBJECTS_INTERACTABLE_OBJECT_FLAG } ; use crate :: api :: scene :: players :: players_get_local_player ; use crate :: api :: scene :: webwalker :: web_player_profile :: WebPlayerProfile ; use crate :: api :: scene :: webwalker :: web_script :: WebScript ; use crate :: api :: ui :: tab :: quests :: Quest ; use crate :: api :: ui :: widgets :: { widgets_find_widget , widgets_is_root_visible } ; use crate :: api :: util :: utils :: utils_sleep_conditional ; use eframe :: egui :: TextBuffer ; use rustc_hash :: FxHashMap ; use strum :: IntoEnumIterator ; use strum_macros :: EnumIter ; # [derive (PartialEq , Copy , Clone , EnumIter)] enum SpiritTree { TreeGnomeVillage , GnomeStronghold , BattlefieldOfKhazard , GrandExchange , FeldipHills , Prifddinas } impl SpiritTree { fn get_target_name (& self) -> & str { unimplemented ! () } fn get_position (& self) -> Position { unimplemented ! () } fn get_destination (& self) -> Position { unimplemented ! () } fn is_quest_completed_for_spirit_tree (p : & WebPlayerProfile , spirit_tree : & SpiritTree) -> bool { unimplemented ! () } } pub (in crate :: api :: scene :: webwalker) fn spirit_tree_load_all (result : & mut FxHashMap < (i32 , i32 , i32) , Vec < WebScript > >) { { } } fn spirit_tree_load (from_spirit_tree : SpiritTree , result : & mut FxHashMap < (i32 , i32 , i32) , Vec < WebScript > >) { { } }