static EMPTY_VEC_I8 : Vec < i8 > = vec ! [] ; static EMPTY_VEC_I32 : Vec < i32 > = vec ! [] ; use crate :: api :: domain :: character :: Character ; use crate :: api :: domain :: entity :: Entity ; use crate :: api :: domain :: object :: Object ; use crate :: api :: domain :: player :: RSPlayer ; use crate :: api :: scene :: coords :: position :: Position ; use crate :: api :: scene :: map :: { map_can_reach_local_position , map_can_reach_position , MAP_GET_SIZE } ; use crate :: api :: scene :: objects :: { objects_find_at_position_conditional , OBJECTS_INTERACTABLE_OBJECT_FLAG , OBJECTS_WALL_OBJECT_FLAG } ; use crate :: api :: scene :: webwalker :: web_script :: WebScript ; use crate :: api :: scene :: webwalker :: web_teleport :: WebTeleport ; use crate :: api :: ui :: minimap :: minimap_click_position ; use crate :: api :: util :: random :: random_between ; use crate :: api :: util :: utils :: { utils_sleep , utils_sleep_conditional , utils_string_hashcode } ; use crate :: api :: web_walking :: WebWalkingArgs ; use std :: hash :: Hash ; pub (crate) enum WebNode { Position (PositionDirection) , Connection (ConnectionDirection) , Teleport (TeleportDirection) , Script (ScriptDirection) } impl WebNode { pub (crate) fn needs_execute (& self , next : & WebNode , flags : & [[i32 ; MAP_GET_SIZE] ; MAP_GET_SIZE]) -> bool { unimplemented ! () } pub (crate) fn execute (& self , force_execute : bool , next : & WebNode , args : & WebWalkingArgs , local_player : & RSPlayer) -> bool { unimplemented ! () } pub (crate) fn get_position (& self) -> & Position { unimplemented ! () } pub (crate) fn is_in_region (& self , base_x : i32 , base_y : i32 , plane : i32) -> bool { unimplemented ! () } } pub (crate) trait Direction { fn needs_execute (& self , next : & WebNode , flags : & [[i32 ; MAP_GET_SIZE] ; MAP_GET_SIZE]) -> bool ; fn execute (& self , force_execute : bool , next : & WebNode , args : & WebWalkingArgs , local_player : & RSPlayer) -> bool ; } pub (crate) struct PositionDirection { position : Position } impl PositionDirection { pub (crate) fn new (position : Position) -> Self { unimplemented ! () } pub (crate) fn get_position (& self) -> & Position { unimplemented ! () } fn is_openable_barrier (object : & dyn Object) -> bool { unimplemented ! () } fn get_barrier (& self , next : & WebNode) -> Option < Box < dyn Object > > { unimplemented ! () } } impl Direction for PositionDirection { fn needs_execute (& self , next : & WebNode , flags : & [[i32 ; MAP_GET_SIZE] ; MAP_GET_SIZE]) -> bool { unimplemented ! () } fn execute (& self , force_execute : bool , next : & WebNode , args : & WebWalkingArgs , local_player : & RSPlayer) -> bool { unimplemented ! () } } pub (crate) struct ConnectionDirection { position : Position , from : Position , target : Position , object_id : i32 , action_hash : i32 } impl ConnectionDirection { pub (crate) fn new (position : Position , from : Position , target : Position , object_id : i32 , action_hash : i32) -> Self { unimplemented ! () } pub (crate) fn get_position (& self) -> & Position { unimplemented ! () } } impl Direction for ConnectionDirection { fn needs_execute (& self , next : & WebNode , flags : & [[i32 ; MAP_GET_SIZE] ; MAP_GET_SIZE]) -> bool { unimplemented ! () } fn execute (& self , force_execute : bool , next : & WebNode , args : & WebWalkingArgs , local_player : & RSPlayer) -> bool { unimplemented ! () } } pub (crate) struct TeleportDirection { position : Position , teleport : WebTeleport } impl TeleportDirection { pub (crate) fn new (position : Position , teleport : WebTeleport) -> Self { unimplemented ! () } pub (crate) fn get_position (& self) -> & Position { unimplemented ! () } } impl Direction for TeleportDirection { fn needs_execute (& self , next : & WebNode , flags : & [[i32 ; MAP_GET_SIZE] ; MAP_GET_SIZE]) -> bool { unimplemented ! () } fn execute (& self , force_execute : bool , next : & WebNode , args : & WebWalkingArgs , local_player : & RSPlayer) -> bool { unimplemented ! () } } pub (crate) struct ScriptDirection { script : WebScript } impl ScriptDirection { pub (crate) fn new (script : WebScript) -> Self { unimplemented ! () } pub (crate) fn get_position (& self) -> & Position { unimplemented ! () } } impl Direction for ScriptDirection { fn needs_execute (& self , next : & WebNode , flags : & [[i32 ; MAP_GET_SIZE] ; MAP_GET_SIZE]) -> bool { unimplemented ! () } fn execute (& self , force_execute : bool , next : & WebNode , args : & WebWalkingArgs , local_player : & RSPlayer) -> bool { unimplemented ! () } }