static EMPTY_VEC_I8 : Vec < i8 > = vec ! [] ; static EMPTY_VEC_I32 : Vec < i32 > = vec ! [] ; use crate :: api :: scene :: coords :: position :: Position ; use crate :: api :: scene :: webwalker :: script :: agility :: agility_load_all ; use crate :: api :: scene :: webwalker :: script :: barriers :: barriers_load_all ; use crate :: api :: scene :: webwalker :: script :: charter_ship :: charter_ship_load_all ; use crate :: api :: scene :: webwalker :: script :: fairy_ring :: fairy_ring_load_all ; use crate :: api :: scene :: webwalker :: script :: glider :: glider_load_all ; use crate :: api :: scene :: webwalker :: script :: spirit_tree :: spirit_tree_load_all ; use crate :: api :: scene :: webwalker :: script :: stronghold_of_security :: stronghold_of_security_load_all ; use crate :: api :: scene :: webwalker :: web_path_finder :: WebPathArgs ; use crate :: api :: scene :: webwalker :: web_player_profile :: WebPlayerProfile ; use rustc_hash :: FxHashMap ; use std :: collections :: HashMap ; use std :: hash :: Hash ; pub (crate) struct WebScript { from : Position , target : Position , condition : Box < dyn Fn (& WebPlayerProfile) -> bool + 'static > , script : Box < dyn Fn () -> bool + 'static > , } impl WebScript { pub (crate) fn new < F1 , F2 > (from : Position , target : Position , condition : F1 , script : F2) -> Self { unimplemented ! () } pub (crate) fn get_from (& self) -> & Position { unimplemented ! () } pub (crate) fn get_target (& self) -> & Position { unimplemented ! () } pub (crate) fn check_condition (& self , profile : & WebPlayerProfile) -> bool { unimplemented ! () } pub (crate) fn execute_script (& self) -> bool { unimplemented ! () } } pub (crate) fn web_script_load_all (args : & WebPathArgs) -> FxHashMap < (i32 , i32 , i32) , Vec < WebScript > > { FxHashMap :: with_capacity_and_hasher (32 , Default :: default ()) }