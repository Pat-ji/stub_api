static EMPTY_VEC_I8 : Vec < i8 > = vec ! [] ; static EMPTY_VEC_I32 : Vec < i32 > = vec ! [] ; use crate :: api :: client :: _client_get_index_object_sets ; use crate :: api :: def :: npc_definitions :: npc_definitions_for_npc ; use crate :: api :: domain :: animable :: RSAnimable ; use crate :: api :: domain :: character :: RSCharacter ; use crate :: api :: domain :: entity :: Entity ; use crate :: api :: domain :: npc :: RSNpc ; use crate :: api :: domain :: player :: RSPlayer ; use crate :: api :: domain :: world_view :: RSWorldView ; use crate :: api :: scene :: coords :: position :: Position ; use crate :: api :: scene :: entities :: entities_closest ; use crate :: api :: scene :: players :: players_get_local_player ; use crate :: api :: scene :: world_view :: world_view_get_world_view ; use crate :: api :: ui :: indexed_object_set :: { indexed_object_set_get_all , indexed_object_set_get_by_index } ; use crate :: api :: util :: find_args :: { IdArgs , NameArgs } ; use crate :: c_address :: CAddress ; use crate :: offsets ; use log :: error ; pub fn npcs_find_closest_by_id < T : Into < IdArgs > > (args : T) -> Option < RSNpc > { unimplemented ! () } pub fn npcs_find_closest_by_name < 'a , T : Into < NameArgs > > (args : T) -> Option < RSNpc > { unimplemented ! () } pub fn npcs_find_closest_conditional (predicate : impl Fn (& RSNpc) -> bool) -> Option < RSNpc > { unimplemented ! () } pub fn npcs_find_closest_to_by_id < T : Into < IdArgs > > (to : Position , args : T) -> Option < RSNpc > { unimplemented ! () } pub fn npcs_find_closest_to_by_name < T : Into < NameArgs > > (to : Position , args : T) -> Option < RSNpc > { unimplemented ! () } pub fn npcs_find_closest_to_conditional (to : Position , predicate : impl Fn (& RSNpc) -> bool) -> Option < RSNpc > { unimplemented ! () } pub fn npcs_find_by_id < T : Into < IdArgs > > (args : T) -> Option < RSNpc > { unimplemented ! () } pub fn npcs_find_by_name < T : Into < NameArgs > > (args : T) -> Option < RSNpc > { unimplemented ! () } pub fn npcs_find_all_by_id < T : Into < IdArgs > > (args : T) -> impl Iterator < Item = RSNpc > { std :: iter :: empty () } pub fn npcs_find_all_by_name < T : Into < NameArgs > > (args : T) -> impl Iterator < Item = RSNpc > { std :: iter :: empty () } pub fn npcs_find_conditional (predicate : impl Fn (& RSNpc) -> bool) -> Option < RSNpc > { unimplemented ! () } pub fn npcs_find_all_conditional (predicate : impl Fn (& RSNpc) -> bool) -> impl Iterator < Item = RSNpc > { std :: iter :: empty () } pub fn npcs_get_at_index (index : i32) -> Option < RSNpc > { unimplemented ! () } pub fn npcs_get_all () -> impl Iterator < Item = RSNpc > { std :: iter :: empty () }