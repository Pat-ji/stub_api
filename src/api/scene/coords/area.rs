static EMPTY_VEC_I8 : Vec < i8 > = vec ! [] ; static EMPTY_VEC_I32 : Vec < i32 > = vec ! [] ; use crate :: api :: scene :: coords :: position :: Position ; use crate :: api :: util :: random :: random_between ; use std :: cmp :: { max , min } ; use crate :: api :: domain :: entity :: Entity ; use crate :: api :: domain :: npc :: RSNpc ; use crate :: api :: domain :: object :: Object ; use crate :: api :: domain :: player :: RSPlayer ; # [derive (Debug , Clone)] pub struct Area { polygon : Vec < (i32 , i32) > , plane : i32 } impl Area { pub fn new_from_coords (coords : & Vec < (i32 , i32) > , plane : i32) -> Self { unimplemented ! () } pub fn new_from_position_coords (positions : & [Position]) -> Self { unimplemented ! () } pub fn new_from_corners (x1 : i32 , y1 : i32 , x2 : i32 , y2 : i32 , plane : i32) -> Self { unimplemented ! () } pub fn new_from_positions (south_west : Position , north_east : Position) -> Self { unimplemented ! () } pub fn set_plane (& mut self , plane : i32) -> & mut Self { unimplemented ! () } pub fn get_bounds (& self) -> (i32 , i32 , i32 , i32) { unimplemented ! () } pub fn contains_coord (& self , x : i32 , y : i32) -> bool { unimplemented ! () } pub fn contains_coord_plane (& self , x : i32 , y : i32 , plane : i32) -> bool { unimplemented ! () } pub fn contains_position (& self , position : & Position) -> bool { unimplemented ! () } pub fn contains_player (& self , player : & RSPlayer) -> bool { unimplemented ! () } pub fn contains_npc (& self , npc : & RSNpc) -> bool { unimplemented ! () } pub fn contains_object (& self , object : & Box < dyn Object >) -> bool { unimplemented ! () } pub fn get_positions (& self) -> Vec < Position > { Vec :: new () } pub fn get_random_position (& self) -> Position { unimplemented ! () } pub fn get_central_position (& self) -> Position { unimplemented ! () } fn polygon_contains (& self , x : i32 , y : i32 , points : usize) -> bool { unimplemented ! () } }