static EMPTY_VEC_I8 : Vec < i8 > = vec ! [] ; static EMPTY_VEC_I32 : Vec < i32 > = vec ! [] ; use crate :: api :: camera :: camera_move_to_position ; use crate :: api :: display :: { display_calculate_tile_height , display_get_screen_coordinates , display_get_world_screen_area , ClippingSpace , DISPLAY_LOCAL_COORD_BITS } ; use crate :: api :: domain :: entity :: { Entity , InteractArgs } ; use crate :: api :: domain :: world_view :: RSWorldView ; use crate :: api :: input :: mouse :: mouse_move ; use crate :: api :: scene :: players :: players_get_local_player ; use crate :: api :: scene :: region :: region_get_collision_flag ; use crate :: api :: scene :: world_view :: world_view_get_world_view ; use crate :: api :: ui :: menu :: { menu_contains_any_action , menu_interact } ; use crate :: api :: ui :: minimap :: { minimap_click_position , minimap_is_position_on_map } ; use crate :: api :: util :: projection :: projection_info :: { projection_info_get , ProjectionInfo } ; use crate :: api :: util :: utils :: utils_sleep_conditional ; use rand :: rngs :: ThreadRng ; use rand :: Rng ; use std :: hash :: Hash ; # [derive (Copy , Clone)] pub struct Position { x : i32 , y : i32 , plane : i32 , world_view : Option < RSWorldView > } impl std :: fmt :: Debug for Position { fn fmt (& self , f : & mut std :: fmt :: Formatter < '_ >) -> std :: fmt :: Result { unimplemented ! () } } impl Hash for Position { fn hash < H : std :: hash :: Hasher > (& self , state : & mut H) { { } } } impl PartialEq for Position { fn eq (& self , other : & Self) -> bool { unimplemented ! () } } impl Position { pub fn new (x : i32 , y : i32 , z : i32) -> Self { unimplemented ! () } pub fn new_in_world_view (x : i32 , y : i32 , z : i32 , world_view : RSWorldView) -> Self { unimplemented ! () } pub fn offset (& self , x : i32 , y : i32) -> Self { unimplemented ! () } pub fn get_x (& self) -> i32 { unimplemented ! () } pub fn get_y (& self) -> i32 { unimplemented ! () } pub fn get_plane (& self) -> i32 { unimplemented ! () } fn get_world_view (& self) -> RSWorldView { unimplemented ! () } pub fn distance (& self , position : & Position) -> i32 { unimplemented ! () } pub fn get_local_x (& self) -> i32 { unimplemented ! () } pub fn get_local_y (& self) -> i32 { unimplemented ! () } pub fn get_grid_x (& self) -> i32 { unimplemented ! () } pub fn get_grid_y (& self) -> i32 { unimplemented ! () } pub fn is_on_minimap (& self) -> bool { unimplemented ! () } pub fn is_visible (& self) -> bool { unimplemented ! () } pub fn get_tile_height (& self) -> i32 { unimplemented ! () } pub fn get_tile_flag (& self) -> i32 { unimplemented ! () } pub fn get_vertices (& self) -> [(i32 , i32) ; 4] { unimplemented ! () } pub fn get_vertices_at_elevation (& self , elevation : i32) -> [(i32 , i32) ; 4] { unimplemented ! () } pub fn get_random_point (& self) -> (i32 , i32) { unimplemented ! () } pub fn hover_args (& self , args : & InteractArgs) -> bool { unimplemented ! () } pub fn interact_args (& self , args : & InteractArgs , action : & str) -> bool { unimplemented ! () } pub fn interact_any_args (& self , args : & InteractArgs , actions : & [& str]) -> bool { unimplemented ! () } pub fn hover (& self) -> bool { unimplemented ! () } pub fn interact (& self , action : & str) -> bool { unimplemented ! () } pub fn interact_any (& self , actions : & [& str]) -> bool { unimplemented ! () } }