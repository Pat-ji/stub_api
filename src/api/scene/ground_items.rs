static EMPTY_VEC_I8 : Vec < i8 > = vec ! [] ; static EMPTY_VEC_I32 : Vec < i32 > = vec ! [] ; use crate :: api :: domain :: entity :: Entity ; use crate :: api :: domain :: ground_item :: RSGroundItem ; use crate :: api :: domain :: world_view :: RSWorldView ; use crate :: api :: scene :: coords :: position :: Position ; use crate :: api :: scene :: entities :: entities_closest ; use crate :: api :: scene :: players :: players_get_local_player ; use crate :: api :: scene :: world_view :: world_view_get_world_view ; use crate :: api :: util :: find_args :: { IdArgs , NameArgs } ; use crate :: api :: util :: performance :: PERFORMANCE_MAX_GROUND_ITEMS_RANGE ; use crate :: c_address :: CAddress ; use crate :: offsets ; pub fn ground_items_find_closest_by_id < T : Into < IdArgs > > (args : T) -> Option < RSGroundItem > { unimplemented ! () } pub fn ground_items_find_closest_by_name < T : Into < NameArgs > > (args : T) -> Option < RSGroundItem > { unimplemented ! () } pub fn ground_items_find_closest_conditional (predicate : impl Fn (& RSGroundItem) -> bool) -> Option < RSGroundItem > { unimplemented ! () } pub fn ground_items_find_closest_to_by_id < T : Into < IdArgs > > (to : Position , args : T) -> Option < RSGroundItem > { unimplemented ! () } pub fn ground_items_find_closest_to_by_name < T : Into < NameArgs > > (to : Position , args : T) -> Option < RSGroundItem > { unimplemented ! () } pub fn ground_items_find_closest_to_conditional (to : Position , predicate : impl Fn (& RSGroundItem) -> bool) -> Option < RSGroundItem > { unimplemented ! () } pub fn ground_items_find_by_id < T : Into < IdArgs > > (args : T) -> Option < RSGroundItem > { unimplemented ! () } pub fn ground_items_find_by_name < T : Into < NameArgs > > (args : T) -> Option < RSGroundItem > { unimplemented ! () } pub fn ground_items_find_all_by_id < T : Into < IdArgs > > (args : T) -> impl Iterator < Item = RSGroundItem > { std :: iter :: empty () } pub fn ground_items_find_all_by_name < T : Into < NameArgs > > (args : T) -> impl Iterator < Item = RSGroundItem > { std :: iter :: empty () } pub fn ground_items_find_conditional (predicate : impl Fn (& RSGroundItem) -> bool) -> Option < RSGroundItem > { unimplemented ! () } pub fn ground_items_find_all_conditional (predicate : impl Fn (& RSGroundItem) -> bool) -> impl Iterator < Item = RSGroundItem > { std :: iter :: empty () } fn ground_items_get_all_at (world_view : RSWorldView , ground_item_dequeues : CAddress , tile : CAddress , x : i32 , y : i32 , base_x : i32 , base_y : i32 , plane : i32) -> impl Iterator < Item = RSGroundItem > { std :: iter :: empty () } pub fn ground_items_get_all_at_local (local_x : i32 , local_y : i32 , plane : i32) -> impl Iterator < Item = RSGroundItem > { std :: iter :: empty () } pub fn ground_items_get_all (plane : i32) -> impl Iterator < Item = RSGroundItem > { std :: iter :: empty () } # [macro_export] macro_rules ! ground_items_get_all { () => { ground_items_get_all (world_view_get_plane ()) } }