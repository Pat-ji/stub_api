static EMPTY_VEC_I8 : Vec < i8 > = vec ! [] ; static EMPTY_VEC_I32 : Vec < i32 > = vec ! [] ; use crate :: api :: client :: _client_get_hovered_entities ; use crate :: api :: domain :: character :: Character ; use crate :: api :: domain :: entity :: { Entity , EntityImpl } ; use crate :: api :: domain :: world_view :: RSWorldView ; use crate :: api :: scene :: coords :: position :: Position ; use crate :: api :: scene :: graphics_objects :: graphics_objects_get_all ; use crate :: api :: scene :: ground_items :: ground_items_get_all_at_local ; use crate :: api :: scene :: npcs :: npcs_get_at_index ; use crate :: api :: scene :: objects :: { objects_find_at_local_conditional , OBJECTS_ALL_OBJECTS_FLAG } ; use crate :: api :: scene :: players :: players_get_at_index ; use crate :: api :: scene :: projectiles :: projectiles_get_all ; use crate :: api :: scene :: world_entities :: world_entities_get_to_world_view ; use crate :: api :: scene :: world_view :: { world_view_get_world_view , world_view_reset_query_world_view , world_view_set_query_world_view } ; use crate :: api :: util :: uuid_decoder :: { uuid_decoder_decode_entity_type , uuid_decoder_decode_id , uuid_decoder_decode_plane , uuid_decoder_decode_world_view_id , uuid_decoder_decode_x , uuid_decoder_decode_y } ; use crate :: c_address :: CAddress ; pub const ENTITIES_TYPE_PLAYER : u8 = 0 ; pub const ENTITIES_TYPE_NPC : u8 = 1 ; pub const ENTITIES_TYPE_OBJECT : u8 = 2 ; pub const ENTITIES_TYPE_GROUND_ITEM : u8 = 3 ; pub fn entities_closest < T > (position : Position , entities : impl Iterator < Item = T >) -> Option < T > { unimplemented ! () } pub fn entities_exists (entity_impl : & EntityImpl) -> bool { unimplemented ! () } pub fn entities_get_hovered () -> Vec < EntityImpl > { Vec :: new () }