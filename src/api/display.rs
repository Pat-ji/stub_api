static EMPTY_VEC_I8 : Vec < i8 > = vec ! [] ; static EMPTY_VEC_I32 : Vec < i32 > = vec ! [] ; use crate :: api :: client :: { _client_get_viewport_depth , _client_get_viewport_height , _client_get_viewport_width , client_get_minimap_yaw , client_get_minimap_zoom , client_is_resizable_mode } ; use crate :: api :: domain :: entity :: Entity ; use crate :: api :: domain :: model :: Model ; use crate :: api :: domain :: widget :: RSWidget ; use crate :: api :: input :: input :: input_get_client_rect ; use crate :: api :: scene :: heightmap :: Heightmap ; use crate :: api :: scene :: map :: MAP_MAX_PLANE ; use crate :: api :: scene :: players :: players_get_local_player ; use crate :: api :: ui :: chatbox :: chatbox_is_visible ; use crate :: api :: ui :: tab :: tabs :: { tabs_get_current_tab , Tab } ; use crate :: api :: ui :: widgets :: widgets_get_widget ; use crate :: api :: util :: projection :: projection_info :: ProjectionInfo ; use crate :: api :: util :: projection :: viewport :: Viewport ; use crate :: api :: util :: random :: { random_between , random_f } ; use crate :: api :: varps :: varps_get_value ; use rand :: Rng ; use std :: panic ; pub (crate) const DISPLAY_LOCAL_COORD_BITS : i32 = 7 ; pub (crate) const DISPLAY_LOCAL_TILE_SIZE : i32 = 1 << DISPLAY_LOCAL_COORD_BITS ; const DISPLAY_RESIZABLE_MODERN_VARP : i32 = 1055 ; const DISPLAY_RESIZABLE_MODERN_VARP_SHIFT : i32 = 8 ; const DISPLAY_FIXED_VIEWPORT_ROOT_ID : i32 = 548 ; const DISPLAY_RESIZABLE_CLASSIC_ROOT_ID : i32 = 161 ; const DISPLAY_RESIZABLE_MODERN_ROOT_ID : i32 = 164 ; const DISPLAY_RESIZABLE_MINIMAP_MODERN_DRAW_AREA_CHILD_ID : i32 = 30 ; const DISPLAY_RESIZABLE_MINIMAP_CLASSIC_DRAW_AREA_CHILD_ID : i32 = 30 ; const DISPLAY_FIXED_VIEWPORT_MINIMAP_DRAW_AREA_CHILD_ID : i32 = 21 ; pub (crate) const DISPLAY_CAMERA_MAX_ANGLES : usize = 2048 ; pub (crate) static mut CAMERA_SIN_TABLE : [i32 ; DISPLAY_CAMERA_MAX_ANGLES] = [0 ; DISPLAY_CAMERA_MAX_ANGLES] ; pub (crate) static mut CAMERA_COS_TABLE : [i32 ; DISPLAY_CAMERA_MAX_ANGLES] = [0 ; DISPLAY_CAMERA_MAX_ANGLES] ; # [derive (Debug)] pub enum DisplayMode { Fixed , ResizableClassic , ResizableModern } # [derive (Debug)] pub struct ClippingSpace { rects : Vec < (i32 , i32 , i32 , i32) > } impl ClippingSpace { pub fn contains (& self , x : i32 , y : i32) -> bool { unimplemented ! () } } pub (crate) fn _display_initialize_camera_tables () { { } } pub fn display_is_point_in_polygon (point : (i32 , i32) , vertices : & [(i32 , i32)]) -> bool { unimplemented ! () } pub fn display_is_modern_mode () -> bool { unimplemented ! () } pub fn display_get_display_mode () -> DisplayMode { unimplemented ! () } pub (crate) fn display_get_root_widget_index () -> i32 { unimplemented ! () } pub (crate) fn display_get_root_widget_id () -> i32 { unimplemented ! () } pub (crate) fn display_get_minimap_widget () -> Option < RSWidget > { unimplemented ! () } pub fn display_get_viewport () -> Viewport { unimplemented ! () } pub fn display_get_viewport_width () -> i32 { unimplemented ! () } pub fn display_get_viewport_height () -> i32 { unimplemented ! () } pub fn display_get_viewport_depth () -> i32 { unimplemented ! () } pub fn display_get_interaction_point (bounds : (i32 , i32 , i32 , i32)) -> (i32 , i32) { unimplemented ! () } pub fn display_calculate_triangle_area (p1 : (i32 , i32) , p2 : (i32 , i32) , p3 : (i32 , i32)) -> f32 { unimplemented ! () } pub fn display_get_random_point_in_triangle (p1 : (i32 , i32) , p2 : (i32 , i32) , p3 : (i32 , i32)) -> (i32 , i32) { unimplemented ! () } pub fn display_get_canvas_width () -> i32 { unimplemented ! () } pub fn display_get_canvas_height () -> i32 { unimplemented ! () } pub fn display_get_world_screen_area () -> ClippingSpace { unimplemented ! () } pub fn display_get_minimap_coordinates (mut local_x : i32 , mut local_y : i32) -> (i32 , i32) { unimplemented ! () } pub fn display_calculate_tile_height (heightmap : & Heightmap , grid_x : i32 , grid_y : i32 , mut plane : i32) -> i32 { unimplemented ! () } pub fn display_get_screen_coordinates (mut grid_x : i32 , mut grid_y : i32 , plane : i32 , mut elevation : i32 , projection_info : & ProjectionInfo) -> (i32 , i32) { unimplemented ! () } pub fn display_get_model_screen_coordinates (model : & Model , mut grid_x : i32 , mut grid_y : i32 , plane : i32 , mut elevation : i32 , projection_info : & ProjectionInfo) -> Vec < (i32 , i32) > { Vec :: new () }