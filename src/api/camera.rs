static EMPTY_VEC_I8 : Vec < i8 > = vec ! [] ; static EMPTY_VEC_I32 : Vec < i32 > = vec ! [] ; use crate :: api :: client :: { _client_get_camera_pitch , _client_get_camera_scale_z , _client_get_camera_x , _client_get_camera_y , _client_get_camera_yaw , _client_get_camera_z } ; use crate :: api :: display :: { display_calculate_tile_height , display_get_viewport_height , display_get_viewport_width , DISPLAY_LOCAL_COORD_BITS } ; use crate :: api :: domain :: entity :: Entity ; use crate :: api :: input :: input :: input_send_mouse_move ; use crate :: api :: input :: mouse :: { mouse_get_x , mouse_get_y , mouse_move , mouse_press_scroll_wheel } ; use crate :: api :: scene :: coords :: position :: Position ; use crate :: api :: scene :: heightmap :: Heightmap ; use crate :: api :: scene :: players :: players_get_local_player ; use crate :: api :: scene :: world_view :: world_view_get_world_view ; use crate :: api :: util :: projection :: camera_info :: CameraInfo ; use crate :: api :: util :: random :: random_between ; use crate :: api :: util :: utils :: utils_sleep ; use crate :: api :: varps :: varps_get_value ; use rand_distr :: num_traits :: real :: Real ; use std :: cmp :: { max , min } ; const CAMERA_MAX_PITCH : i32 = 67 ; const CAMERA_MIN_PITCH : i32 = 22 ; const CAMERA_MIDDLE_MOUSE_CONTROL_VARP : i32 = 1055 ; const CAMERA_MIDDLE_MOUSE_CONTROL_VARP_SHIFT : i32 = 5 ; pub fn camera_get_camera_info () -> CameraInfo { unimplemented ! () } pub fn camera_get_pitch () -> i32 { unimplemented ! () } pub fn camera_get_yaw () -> i32 { unimplemented ! () } pub fn camera_get_x () -> i32 { unimplemented ! () } pub fn camera_get_y () -> i32 { unimplemented ! () } pub fn camera_get_z () -> i32 { unimplemented ! () } pub fn camera_get_scale_z () -> f32 { unimplemented ! () } pub fn camera_get_pitch_angle () -> i32 { unimplemented ! () } pub fn camera_get_yaw_angle () -> i32 { unimplemented ! () } pub fn camera_can_use_mouse_control () -> bool { unimplemented ! () } pub fn camera_move_pitch (pitch : i32) -> bool { unimplemented ! () } pub fn camera_move_yaw (yaw : i32) -> bool { unimplemented ! () } pub fn camera_to_top () -> bool { unimplemented ! () } pub fn camera_to_bottom () -> bool { unimplemented ! () } pub fn camera_move_to_entity < T : Entity + ? Sized > (entity : & T) -> bool { unimplemented ! () } pub fn camera_move_to_entity_origin < T : Entity + ? Sized > (origin : & Position , entity : & T) -> bool { unimplemented ! () } pub fn camera_move_to_position (position : & Position) -> bool { unimplemented ! () } pub fn camera_move_to_position_origin (origin : & Position , position : & Position) -> bool { unimplemented ! () } pub fn camera_move_to_angle (yaw : i32 , mut pitch : i32) -> bool { unimplemented ! () } pub fn camera_get_yaw_to (origin : & Position , position : & Position) -> i32 { unimplemented ! () } pub fn camera_get_pitch_to (origin : & Position , position : & Position , height : i32) -> i32 { unimplemented ! () }